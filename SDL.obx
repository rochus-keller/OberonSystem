(*
  Simple DirectMedia Layer
  Copyright (C) 1997-2014 Sam Lantinga <slouken@libsdl.org>

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.
*)

(* 
	This file was generated from SDL v2.0.2 using C2OBX 
   (see https://github.com/rochus-keller/c2obx/) and then
   slightly adjusted by me@rochus-keller.ch (removed SDL_main, 
   unused typedefs, _SDL_; fixed two with *void and three with [])
*)

definition SDL [extern 'C', dll 'SDL2', prefix 'SDL_']

    // from SDL.h
	
    proc Init(flags: integer): integer
    proc InitSubSystem(flags: integer): integer
    proc QuitSubSystem(flags: integer)
    proc WasInit(flags: integer): integer
    proc Quit

    // from SDL_assert.h
    type
        assert_state = (ASSERTION_RETRY, ASSERTION_BREAK, ASSERTION_ABORT, ASSERTION_IGNORE, ASSERTION_ALWAYS_IGNORE)
        assert_data = cstruct
                always_ignore: integer
                trigger_count: integer
                condition: *[]char
                filename: *[]char
                linenum: integer
                function: *[]char
                next: *assert_data end
        AssertionHandler = proc(data: *assert_data; userdata: *void): assert_state

    proc ReportAssertion(_1: *assert_data; _2: *[]char; _3: *[]char; _4: integer): assert_state
    proc SetAssertionHandler(handler: AssertionHandler; userdata: *void)
    proc GetDefaultAssertionHandler(): AssertionHandler
    proc GetAssertionHandler(puserdata: *[]*void): AssertionHandler
    proc GetAssertionReport(): *assert_data
    proc ResetAssertionReport

    // from SDL_atomic.h
    type
        atomic_t = cstruct
                value: integer end

    proc AtomicTryLock(lock: *[]integer): bool
    proc AtomicLock(lock: *[]integer)
    proc AtomicUnlock(lock: *[]integer)
    proc AtomicCAS(a: *atomic_t; oldval: integer; newval: integer): bool
    proc AtomicSet(a: *atomic_t; v: integer): integer
    proc AtomicGet(a: *atomic_t): integer
    proc AtomicAdd(a: *atomic_t; v: integer): integer
    proc AtomicCASPtr(a: *[]*void; oldval: *void; newval: *void): bool
    proc AtomicSetPtr(a: *[]*void; v: *void): *void
    proc AtomicGetPtr(a: *[]*void): *void

    // from SDL_audio.h
    type
        AudioCallback = proc(userdata: *void; stream: *[]byte; len: integer)
        AudioSpec = cstruct
                freq: integer
                format: shortint
                channels: byte
                silence: byte
                samples: shortint
                padding: shortint
                size: integer
                callback: AudioCallback
                userdata: *void end
        AudioFilter = proc(cvt: *AudioCVT; format: shortint)
        AudioCVT = cstruct
                needed: integer
                src_format: shortint
                dst_format: shortint
                rate_incr: longreal
                buf: *[]byte
                len: integer
                len_cvt: integer
                len_mult: integer
                len_ratio: longreal
                filters: carray 10 of AudioFilter
                filter_index: integer end
        AudioStatus = (AUDIO_STOPPED, AUDIO_PLAYING, AUDIO_PAUSED)

    proc GetNumAudioDrivers(): integer
    proc GetAudioDriver(index: integer): *[]char
    proc AudioInit(driver_name: *[]char): integer
    proc AudioQuit
    proc GetCurrentAudioDriver(): *[]char
    proc OpenAudio(desired: *AudioSpec; obtained: *AudioSpec): integer
    proc GetNumAudioDevices(iscapture: integer): integer
    proc GetAudioDeviceName(index: integer; iscapture: integer): *[]char
    proc OpenAudioDevice(device: *[]char; iscapture: integer; desired: *AudioSpec; obtained: *AudioSpec; allowed_changes: integer): integer
    proc GetAudioStatus(): AudioStatus
    proc GetAudioDeviceStatus(dev: integer): AudioStatus
    proc PauseAudio(pause_on: integer)
    proc PauseAudioDevice(dev: integer; pause_on: integer)
    proc LoadWAV_RW(src: *RWops; freesrc: integer; spec: *AudioSpec; audio_buf: *[]*[]byte; audio_len: *[]integer): *AudioSpec
    proc FreeWAV(audio_buf: *[]byte)
    proc BuildAudioCVT(cvt: *AudioCVT; src_format: shortint; src_channels: byte; src_rate: integer; dst_format: shortint; dst_channels: byte; dst_rate: integer): integer
    proc ConvertAudio(cvt: *AudioCVT): integer
    proc MixAudio(dst: *[]byte; src: *[]byte; len: integer; volume: integer)
    proc MixAudioFormat(dst: *[]byte; src: *[]byte; format: shortint; len: integer; volume: integer)
    proc LockAudio
    proc LockAudioDevice(dev: integer)
    proc UnlockAudio
    proc UnlockAudioDevice(dev: integer)
    proc CloseAudio
    proc CloseAudioDevice(dev: integer)

    // from SDL_clipboard.h
    proc SetClipboardText(text: *[]char): integer
    proc GetClipboardText(): *[]char
    proc HasClipboardText(): bool

    // from SDL_cpuinfo.h
    proc GetCPUCount(): integer
    proc GetCPUCacheLineSize(): integer
    proc HasRDTSC(): bool
    proc HasAltiVec(): bool
    proc HasMMX(): bool
    proc Has3DNow(): bool
    proc HasSSE(): bool
    proc HasSSE2(): bool
    proc HasSSE3(): bool
    proc HasSSE41(): bool
    proc HasSSE42(): bool
    proc HasAVX(): bool
    proc GetSystemRAM(): integer

    // from SDL_error.h
    type
        errorcode = (ENOMEM, EFREAD, EFWRITE, EFSEEK, UNSUPPORTED, LASTERROR)

    proc SetError(fmt: *[]char): integer [varargs]
    proc GetError(): *[]char
    proc ClearError
    proc Error(code: errorcode): integer

    // from SDL_events.h
    type
        EventType = integer
    const
        APP_DIDENTERBACKGROUND = 260
        APP_DIDENTERFOREGROUND = 262
        APP_LOWMEMORY = 258
        APP_TERMINATING = 257
        APP_WILLENTERBACKGROUND = 259
        APP_WILLENTERFOREGROUND = 261
        CLIPBOARDUPDATE = 2304
        CONTROLLERAXISMOTION = 1616
        CONTROLLERBUTTONDOWN = 1617
        CONTROLLERBUTTONUP = 1618
        CONTROLLERDEVICEADDED = 1619
        CONTROLLERDEVICEREMAPPED = 1621
        CONTROLLERDEVICEREMOVED = 1620
        DOLLARGESTURE = 2048
        DOLLARRECORD = 2049
        DROPFILE = 4096
        FINGERDOWN = 1792
        FINGERMOTION = 1794
        FINGERUP = 1793
        FIRSTEVENT = 0
        JOYAXISMOTION = 1536
        JOYBALLMOTION = 1537
        JOYBUTTONDOWN = 1539
        JOYBUTTONUP = 1540
        JOYDEVICEADDED = 1541
        JOYDEVICEREMOVED = 1542
        JOYHATMOTION = 1538
        KEYDOWN = 768
        KEYUP = 769
        LASTEVENT = 65535
        MOUSEBUTTONDOWN = 1025
        MOUSEBUTTONUP = 1026
        MOUSEMOTION = 1024
        MOUSEWHEEL = 1027
        MULTIGESTURE = 2050
        QUIT = 256
        RENDER_TARGETS_RESET = 8192
        SYSWMEVENT = 513
        TEXTEDITING = 770
        TEXTINPUT = 771
        USEREVENT = 32768
        WINDOWEVENT = 512
        
        PRESSED =		1
			  RELEASED =	0
				BUTTON_LEFT =	1
				BUTTON_MIDDLE =	2
				BUTTON_RIGHT =	3


    type
        Keysym = cstruct
                scancode: Scancode
                sym: integer
                mod_: shortint
                unused: integer end
        int64_t = integer
        OSEvent = cstruct
                type_: integer
                timestamp: integer end
        SysWMmsg = cstruct end
        CommonEvent = cstruct
                type_: integer
                timestamp: integer end
        WindowEvent = cstruct
                type_: integer
                timestamp: integer
                windowID: integer
                event: byte
                padding1: byte
                padding2: byte
                padding3: byte
                data1: integer
                data2: integer end
        KeyboardEvent = cstruct
                type_: integer
                timestamp: integer
                windowID: integer
                state: byte
                repeat_: byte
                padding2: byte
                padding3: byte
                keysym: Keysym end
        TextEditingEvent = cstruct
                type_: integer
                timestamp: integer
                windowID: integer
                text: carray 32 of char
                start: integer
                length: integer end
        TextInputEvent = cstruct
                type_: integer
                timestamp: integer
                windowID: integer
                text: carray 32 of char end
        MouseMotionEvent = cstruct
                type_: integer
                timestamp: integer
                windowID: integer
                which: integer
                state: integer
                x: integer
                y: integer
                xrel: integer
                yrel: integer end
	        MouseButtonEvent = cstruct
                type_: integer
                timestamp: integer
                windowID: integer
                which: integer
                button: byte
                state: byte
                clicks: byte
                padding1: byte
                x: integer
                y: integer end
        MouseWheelEvent = cstruct
                type_: integer
                timestamp: integer
                windowID: integer
                which: integer
                x: integer
                y: integer end
        JoyAxisEvent = cstruct
                type_: integer
                timestamp: integer
                which: integer
                axis: byte
                padding1: byte
                padding2: byte
                padding3: byte
                value: shortint
                padding4: shortint end
        JoyBallEvent = cstruct
                type_: integer
                timestamp: integer
                which: integer
                ball: byte
                padding1: byte
                padding2: byte
                padding3: byte
                xrel: shortint
                yrel: shortint end
        JoyHatEvent = cstruct
                type_: integer
                timestamp: integer
                which: integer
                hat: byte
                value: byte
                padding1: byte
                padding2: byte end
        JoyButtonEvent = cstruct
                type_: integer
                timestamp: integer
                which: integer
                button: byte
                state: byte
                padding1: byte
                padding2: byte end
        JoyDeviceEvent = cstruct
                type_: integer
                timestamp: integer
                which: integer end
        ControllerAxisEvent = cstruct
                type_: integer
                timestamp: integer
                which: integer
                axis: byte
                padding1: byte
                padding2: byte
                padding3: byte
                value: shortint
                padding4: shortint end
        ControllerButtonEvent = cstruct
                type_: integer
                timestamp: integer
                which: integer
                button: byte
                state: byte
                padding1: byte
                padding2: byte end
        ControllerDeviceEvent = cstruct
                type_: integer
                timestamp: integer
                which: integer end
        QuitEvent = cstruct
                type_: integer
                timestamp: integer end
        UserEvent = cstruct
                type_: integer
                timestamp: integer
                windowID: integer
                code: integer
                data1: *void
                data2: *void end
        SysWMEvent = cstruct
                type_: integer
                timestamp: integer
                msg: *SysWMmsg end
        TouchFingerEvent = cstruct
                type_: integer
                timestamp: integer
                touchId: integer
                fingerId: integer
                x: real
                y: real
                dx: real
                dy: real
                pressure: real end
        MultiGestureEvent = cstruct
                type_: integer
                timestamp: integer
                touchId: integer
                dTheta: real
                dDist: real
                x: real
                y: real
                numFingers: shortint
                padding: shortint end
        DollarGestureEvent = cstruct
                type_: integer
                timestamp: integer
                touchId: integer
                gestureId: integer
                numFingers: integer
                error: real
                x: real
                y: real end
        DropEvent = cstruct
                type_: integer
                timestamp: integer
                file: *[]char end
        Event = cunion
                type_: integer
                common: CommonEvent
                window: WindowEvent
                key: KeyboardEvent
                edit: TextEditingEvent
                text: TextInputEvent
                motion: MouseMotionEvent
                button: MouseButtonEvent
                wheel: MouseWheelEvent
                jaxis: JoyAxisEvent
                jball: JoyBallEvent
                jhat: JoyHatEvent
                jbutton: JoyButtonEvent
                jdevice: JoyDeviceEvent
                caxis: ControllerAxisEvent
                cbutton: ControllerButtonEvent
                cdevice: ControllerDeviceEvent
                quit: QuitEvent
                user: UserEvent
                syswm: SysWMEvent
                tfinger: TouchFingerEvent
                mgesture: MultiGestureEvent
                dgesture: DollarGestureEvent
                drop: DropEvent
                padding: carray 56 of byte end
        eventaction = (ADDEVENT, PEEKEVENT, GETEVENT)
        EventFilter = proc(userdata: *void; event: *Event): integer

    proc PumpEvents
    proc PeepEvents(events: *Event; numevents: integer; action: eventaction; minType: integer; maxType: integer): integer
    proc HasEvent(type_: integer): bool
    proc HasEvents(minType: integer; maxType: integer): bool
    proc FlushEvent(type_: integer)
    proc FlushEvents(minType: integer; maxType: integer)
    proc PollEvent(event: *Event): integer
    proc WaitEvent(event: *Event): integer
    proc WaitEventTimeout(event: *Event; timeout: integer): integer
    proc PushEvent(event: *Event): integer
    proc SetEventFilter(filter: EventFilter; userdata: *void)
    proc GetEventFilter(filter: *[]proc(userdata: *void; event: *Event): integer; userdata: *[]*void): bool
    proc AddEventWatch(filter: EventFilter; userdata: *void)
    proc DelEventWatch(filter: EventFilter; userdata: *void)
    proc FilterEvents(filter: EventFilter; userdata: *void)
    proc EventState(type_: integer; state: integer): byte
    proc RegisterEvents(numevents: integer): integer

    // from SDL_filesystem.h
    proc GetBasePath(): *[]char
    proc GetPrefPath(org: *[]char; app: *[]char): *[]char

    // from SDL_gamecontroller.h
    type
        GameController = cstruct end
        GameControllerBindType = (CONTROLLER_BINDTYPE_NONE, CONTROLLER_BINDTYPE_BUTTON, CONTROLLER_BINDTYPE_AXIS, CONTROLLER_BINDTYPE_HAT)
        GameControllerButtonBind = cstruct
                bindType: GameControllerBindType
                value: cunion
						    button: integer
						    axis: integer
						    hat: cstruct
						    hat: integer
						    hat_mask: integer end end end
        JoystickGUID = cstruct
                data: carray 16 of byte end
        GameControllerAxis = integer
    const
        CONTROLLER_AXIS_INVALID = -1
        CONTROLLER_AXIS_LEFTX = 0
        CONTROLLER_AXIS_LEFTY = 1
        CONTROLLER_AXIS_MAX = 6
        CONTROLLER_AXIS_RIGHTX = 2
        CONTROLLER_AXIS_RIGHTY = 3
        CONTROLLER_AXIS_TRIGGERLEFT = 4
        CONTROLLER_AXIS_TRIGGERRIGHT = 5

    type
        GameControllerButton = integer
    const
        CONTROLLER_BUTTON_A = 0
        CONTROLLER_BUTTON_B = 1
        CONTROLLER_BUTTON_BACK = 4
        CONTROLLER_BUTTON_DPAD_DOWN = 12
        CONTROLLER_BUTTON_DPAD_LEFT = 13
        CONTROLLER_BUTTON_DPAD_RIGHT = 14
        CONTROLLER_BUTTON_DPAD_UP = 11
        CONTROLLER_BUTTON_GUIDE = 5
        CONTROLLER_BUTTON_INVALID = -1
        CONTROLLER_BUTTON_LEFTSHOULDER = 9
        CONTROLLER_BUTTON_LEFTSTICK = 7
        CONTROLLER_BUTTON_MAX = 15
        CONTROLLER_BUTTON_RIGHTSHOULDER = 10
        CONTROLLER_BUTTON_RIGHTSTICK = 8
        CONTROLLER_BUTTON_START = 6
        CONTROLLER_BUTTON_X = 2
        CONTROLLER_BUTTON_Y = 3

    proc GameControllerAddMappingsFromRW(rw: *RWops; freerw: integer): integer
    proc GameControllerAddMapping(mappingString: *[]char): integer
    proc GameControllerMappingForGUID(guid: JoystickGUID): *[]char
    proc GameControllerMapping(gamecontroller: *GameController): *[]char
    proc IsGameController(joystick_index: integer): bool
    proc GameControllerNameForIndex(joystick_index: integer): *[]char
    proc GameControllerOpen(joystick_index: integer): *GameController
    proc GameControllerName(gamecontroller: *GameController): *[]char
    proc GameControllerGetAttached(gamecontroller: *GameController): bool
    proc GameControllerGetJoystick(gamecontroller: *GameController): *Joystick
    proc GameControllerEventState(state: integer): integer
    proc GameControllerUpdate
    proc GameControllerGetAxisFromString(pchString: *[]char): GameControllerAxis
    proc GameControllerGetStringForAxis(axis: GameControllerAxis): *[]char
    proc GameControllerGetBindForAxis(gamecontroller: *GameController; axis: GameControllerAxis): GameControllerButtonBind
    proc GameControllerGetAxis(gamecontroller: *GameController; axis: GameControllerAxis): shortint
    proc GameControllerGetButtonFromString(pchString: *[]char): GameControllerButton
    proc GameControllerGetStringForButton(button: GameControllerButton): *[]char
    proc GameControllerGetBindForButton(gamecontroller: *GameController; button: GameControllerButton): GameControllerButtonBind
    proc GameControllerGetButton(gamecontroller: *GameController; button: GameControllerButton): byte
    proc GameControllerClose(gamecontroller: *GameController)

    // from SDL_gesture.h
    proc RecordGesture(touchId: integer): integer
    proc SaveAllDollarTemplates(dst: *RWops): integer
    proc SaveDollarTemplate(gestureId: integer; dst: *RWops): integer
    proc LoadDollarTemplates(touchId: integer; src: *RWops): integer

    // from SDL_haptic.h
    type
        Haptic = cstruct end
        int16_t = shortint
        HapticDirection = cstruct
                type_: byte
                dir: carray 3 of integer end
        AudioFormat = shortint
        HapticConstant = cstruct
                type_: shortint
                direction: HapticDirection
                length: integer
                delay: shortint
                button: shortint
                interval: shortint
                level: shortint
                attack_length: shortint
                attack_level: shortint
                fade_length: shortint
                fade_level: shortint end
        HapticPeriodic = cstruct
                type_: shortint
                direction: HapticDirection
                length: integer
                delay: shortint
                button: shortint
                interval: shortint
                period: shortint
                magnitude: shortint
                offset: shortint
                phase: shortint
                attack_length: shortint
                attack_level: shortint
                fade_length: shortint
                fade_level: shortint end
        HapticCondition = cstruct
                type_: shortint
                direction: HapticDirection
                length: integer
                delay: shortint
                button: shortint
                interval: shortint
                right_sat: carray 3 of shortint
                left_sat: carray 3 of shortint
                right_coeff: carray 3 of shortint
                left_coeff: carray 3 of shortint
                deadband: carray 3 of shortint
                center: carray 3 of shortint end
        HapticRamp = cstruct
                type_: shortint
                direction: HapticDirection
                length: integer
                delay: shortint
                button: shortint
                interval: shortint
                start: shortint
                end_: shortint
                attack_length: shortint
                attack_level: shortint
                fade_length: shortint
                fade_level: shortint end
        HapticLeftRight = cstruct
                type_: shortint
                length: integer
                large_magnitude: shortint
                small_magnitude: shortint end
        HapticCustom = cstruct
                type_: shortint
                direction: HapticDirection
                length: integer
                delay: shortint
                button: shortint
                interval: shortint
                channels: byte
                period: shortint
                samples: shortint
                data: *[]shortint
                attack_length: shortint
                attack_level: shortint
                fade_length: shortint
                fade_level: shortint end
        HapticEffect = cunion
                type_: shortint
                constant: HapticConstant
                periodic: HapticPeriodic
                condition: HapticCondition
                ramp: HapticRamp
                leftright: HapticLeftRight
                custom: HapticCustom end

    proc NumHaptics(): integer
    proc HapticName(device_index: integer): *[]char
    proc HapticOpen(device_index: integer): *Haptic
    proc HapticOpened(device_index: integer): integer
    proc HapticIndex(haptic: *Haptic): integer
    proc MouseIsHaptic(): integer
    proc HapticOpenFromMouse(): *Haptic
    proc JoystickIsHaptic(joystick: *Joystick): integer
    proc HapticOpenFromJoystick(joystick: *Joystick): *Haptic
    proc HapticClose(haptic: *Haptic)
    proc HapticNumEffects(haptic: *Haptic): integer
    proc HapticNumEffectsPlaying(haptic: *Haptic): integer
    proc HapticQuery(haptic: *Haptic): integer
    proc HapticNumAxes(haptic: *Haptic): integer
    proc HapticEffectSupported(haptic: *Haptic; effect: *HapticEffect): integer
    proc HapticNewEffect(haptic: *Haptic; effect: *HapticEffect): integer
    proc HapticUpdateEffect(haptic: *Haptic; effect: integer; data: *HapticEffect): integer
    proc HapticRunEffect(haptic: *Haptic; effect: integer; iterations: integer): integer
    proc HapticStopEffect(haptic: *Haptic; effect: integer): integer
    proc HapticDestroyEffect(haptic: *Haptic; effect: integer)
    proc HapticGetEffectStatus(haptic: *Haptic; effect: integer): integer
    proc HapticSetGain(haptic: *Haptic; gain: integer): integer
    proc HapticSetAutocenter(haptic: *Haptic; autocenter: integer): integer
    proc HapticPause(haptic: *Haptic): integer
    proc HapticUnpause(haptic: *Haptic): integer
    proc HapticStopAll(haptic: *Haptic): integer
    proc HapticRumbleSupported(haptic: *Haptic): integer
    proc HapticRumbleInit(haptic: *Haptic): integer
    proc HapticRumblePlay(haptic: *Haptic; strength: real; length: integer): integer
    proc HapticRumbleStop(haptic: *Haptic): integer

    // from SDL_hints.h
    type
        HintPriority = (HINT_DEFAULT, HINT_NORMAL, HINT_OVERRIDE)
        HintCallback = proc(userdata: *void; name: *[]char; oldValue: *[]char; newValue: *[]char)

    proc SetHintWithPriority(name: *[]char; value: *[]char; priority: HintPriority): bool
    proc SetHint(name: *[]char; value: *[]char): bool
    proc GetHint(name: *[]char): *[]char
    proc AddHintCallback(name: *[]char; callback: HintCallback; userdata: *void)
    proc DelHintCallback(name: *[]char; callback: HintCallback; userdata: *void)
    proc ClearHints

    // from SDL_joystick.h
    type
        Joystick = cstruct end

    proc NumJoysticks(): integer
    proc JoystickNameForIndex(device_index: integer): *[]char
    proc JoystickOpen(device_index: integer): *Joystick
    proc JoystickName(joystick: *Joystick): *[]char
    proc JoystickGetDeviceGUID(device_index: integer): JoystickGUID
    proc JoystickGetGUID(joystick: *Joystick): JoystickGUID
    proc JoystickGetGUIDString(guid: JoystickGUID; pszGUID: *[]char; cbGUID: integer)
    proc JoystickGetGUIDFromString(pchGUID: *[]char): JoystickGUID
    proc JoystickGetAttached(joystick: *Joystick): bool
    proc JoystickInstanceID(joystick: *Joystick): integer
    proc JoystickNumAxes(joystick: *Joystick): integer
    proc JoystickNumBalls(joystick: *Joystick): integer
    proc JoystickNumHats(joystick: *Joystick): integer
    proc JoystickNumButtons(joystick: *Joystick): integer
    proc JoystickUpdate
    proc JoystickEventState(state: integer): integer
    proc JoystickGetAxis(joystick: *Joystick; axis: integer): shortint
    proc JoystickGetHat(joystick: *Joystick; hat: integer): byte
    proc JoystickGetBall(joystick: *Joystick; ball: integer; dx: *[]integer; dy: *[]integer): integer
    proc JoystickGetButton(joystick: *Joystick; button: integer): byte
    proc JoystickClose(joystick: *Joystick)

    // from SDL_keyboard.h
    type
        Keymod = integer
    const
        KMOD_CAPS = 8192
        KMOD_LALT = 256
        KMOD_LCTRL = 64
        KMOD_LGUI = 1024
        KMOD_LSHIFT = 1
        KMOD_MODE = 16384
        KMOD_NONE = 0
        KMOD_NUM = 4096
        KMOD_RALT = 512
        KMOD_RCTRL = 128
        KMOD_RESERVED = 32768
        KMOD_RGUI = 2048
        KMOD_RSHIFT = 2

    type
        Scancode = integer
    const
        NUM_SCANCODES = 512
        SCANCODE_0 = 39
        SCANCODE_1 = 30
        SCANCODE_2 = 31
        SCANCODE_3 = 32
        SCANCODE_4 = 33
        SCANCODE_5 = 34
        SCANCODE_6 = 35
        SCANCODE_7 = 36
        SCANCODE_8 = 37
        SCANCODE_9 = 38
        SCANCODE_A = 4
        SCANCODE_AC_BACK = 270
        SCANCODE_AC_BOOKMARKS = 274
        SCANCODE_AC_FORWARD = 271
        SCANCODE_AC_HOME = 269
        SCANCODE_AC_REFRESH = 273
        SCANCODE_AC_SEARCH = 268
        SCANCODE_AC_STOP = 272
        SCANCODE_AGAIN = 121
        SCANCODE_ALTERASE = 153
        SCANCODE_APOSTROPHE = 52
        SCANCODE_APP1 = 283
        SCANCODE_APP2 = 284
        SCANCODE_APPLICATION = 101
        SCANCODE_AUDIOMUTE = 262
        SCANCODE_AUDIONEXT = 258
        SCANCODE_AUDIOPLAY = 261
        SCANCODE_AUDIOPREV = 259
        SCANCODE_AUDIOSTOP = 260
        SCANCODE_B = 5
        SCANCODE_BACKSLASH = 49
        SCANCODE_BACKSPACE = 42
        SCANCODE_BRIGHTNESSDOWN = 275
        SCANCODE_BRIGHTNESSUP = 276
        SCANCODE_C = 6
        SCANCODE_CALCULATOR = 266
        SCANCODE_CANCEL = 155
        SCANCODE_CAPSLOCK = 57
        SCANCODE_CLEAR = 156
        SCANCODE_CLEARAGAIN = 162
        SCANCODE_COMMA = 54
        SCANCODE_COMPUTER = 267
        SCANCODE_COPY = 124
        SCANCODE_CRSEL = 163
        SCANCODE_CURRENCYSUBUNIT = 181
        SCANCODE_CURRENCYUNIT = 180
        SCANCODE_CUT = 123
        SCANCODE_D = 7
        SCANCODE_DECIMALSEPARATOR = 179
        SCANCODE_DELETE = 76
        SCANCODE_DISPLAYSWITCH = 277
        SCANCODE_DOWN = 81
        SCANCODE_E = 8
        SCANCODE_EJECT = 281
        SCANCODE_END = 77
        SCANCODE_EQUALS = 46
        SCANCODE_ESCAPE = 41
        SCANCODE_EXECUTE = 116
        SCANCODE_EXSEL = 164
        SCANCODE_F = 9
        SCANCODE_F1 = 58
        SCANCODE_F10 = 67
        SCANCODE_F11 = 68
        SCANCODE_F12 = 69
        SCANCODE_F13 = 104
        SCANCODE_F14 = 105
        SCANCODE_F15 = 106
        SCANCODE_F16 = 107
        SCANCODE_F17 = 108
        SCANCODE_F18 = 109
        SCANCODE_F19 = 110
        SCANCODE_F2 = 59
        SCANCODE_F20 = 111
        SCANCODE_F21 = 112
        SCANCODE_F22 = 113
        SCANCODE_F23 = 114
        SCANCODE_F24 = 115
        SCANCODE_F3 = 60
        SCANCODE_F4 = 61
        SCANCODE_F5 = 62
        SCANCODE_F6 = 63
        SCANCODE_F7 = 64
        SCANCODE_F8 = 65
        SCANCODE_F9 = 66
        SCANCODE_FIND = 126
        SCANCODE_G = 10
        SCANCODE_GRAVE = 53
        SCANCODE_H = 11
        SCANCODE_HELP = 117
        SCANCODE_HOME = 74
        SCANCODE_I = 12
        SCANCODE_INSERT = 73
        SCANCODE_INTERNATIONAL1 = 135
        SCANCODE_INTERNATIONAL2 = 136
        SCANCODE_INTERNATIONAL3 = 137
        SCANCODE_INTERNATIONAL4 = 138
        SCANCODE_INTERNATIONAL5 = 139
        SCANCODE_INTERNATIONAL6 = 140
        SCANCODE_INTERNATIONAL7 = 141
        SCANCODE_INTERNATIONAL8 = 142
        SCANCODE_INTERNATIONAL9 = 143
        SCANCODE_J = 13
        SCANCODE_K = 14
        SCANCODE_KBDILLUMDOWN = 279
        SCANCODE_KBDILLUMTOGGLE = 278
        SCANCODE_KBDILLUMUP = 280
        SCANCODE_KP_0 = 98
        SCANCODE_KP_00 = 176
        SCANCODE_KP_000 = 177
        SCANCODE_KP_1 = 89
        SCANCODE_KP_2 = 90
        SCANCODE_KP_3 = 91
        SCANCODE_KP_4 = 92
        SCANCODE_KP_5 = 93
        SCANCODE_KP_6 = 94
        SCANCODE_KP_7 = 95
        SCANCODE_KP_8 = 96
        SCANCODE_KP_9 = 97
        SCANCODE_KP_A = 188
        SCANCODE_KP_AMPERSAND = 199
        SCANCODE_KP_AT = 206
        SCANCODE_KP_B = 189
        SCANCODE_KP_BACKSPACE = 187
        SCANCODE_KP_BINARY = 218
        SCANCODE_KP_C = 190
        SCANCODE_KP_CLEAR = 216
        SCANCODE_KP_CLEARENTRY = 217
        SCANCODE_KP_COLON = 203
        SCANCODE_KP_COMMA = 133
        SCANCODE_KP_D = 191
        SCANCODE_KP_DBLAMPERSAND = 200
        SCANCODE_KP_DBLVERTICALBAR = 202
        SCANCODE_KP_DECIMAL = 220
        SCANCODE_KP_DIVIDE = 84
        SCANCODE_KP_E = 192
        SCANCODE_KP_ENTER = 88
        SCANCODE_KP_EQUALS = 103
        SCANCODE_KP_EQUALSAS400 = 134
        SCANCODE_KP_EXCLAM = 207
        SCANCODE_KP_F = 193
        SCANCODE_KP_GREATER = 198
        SCANCODE_KP_HASH = 204
        SCANCODE_KP_HEXADECIMAL = 221
        SCANCODE_KP_LEFTBRACE = 184
        SCANCODE_KP_LEFTPAREN = 182
        SCANCODE_KP_LESS = 197
        SCANCODE_KP_MEMADD = 211
        SCANCODE_KP_MEMCLEAR = 210
        SCANCODE_KP_MEMDIVIDE = 214
        SCANCODE_KP_MEMMULTIPLY = 213
        SCANCODE_KP_MEMRECALL = 209
        SCANCODE_KP_MEMSTORE = 208
        SCANCODE_KP_MEMSUBTRACT = 212
        SCANCODE_KP_MINUS = 86
        SCANCODE_KP_MULTIPLY = 85
        SCANCODE_KP_OCTAL = 219
        SCANCODE_KP_PERCENT = 196
        SCANCODE_KP_PERIOD = 99
        SCANCODE_KP_PLUS = 87
        SCANCODE_KP_PLUSMINUS = 215
        SCANCODE_KP_POWER = 195
        SCANCODE_KP_RIGHTBRACE = 185
        SCANCODE_KP_RIGHTPAREN = 183
        SCANCODE_KP_SPACE = 205
        SCANCODE_KP_TAB = 186
        SCANCODE_KP_VERTICALBAR = 201
        SCANCODE_KP_XOR = 194
        SCANCODE_L = 15
        SCANCODE_LALT = 226
        SCANCODE_LANG1 = 144
        SCANCODE_LANG2 = 145
        SCANCODE_LANG3 = 146
        SCANCODE_LANG4 = 147
        SCANCODE_LANG5 = 148
        SCANCODE_LANG6 = 149
        SCANCODE_LANG7 = 150
        SCANCODE_LANG8 = 151
        SCANCODE_LANG9 = 152
        SCANCODE_LCTRL = 224
        SCANCODE_LEFT = 80
        SCANCODE_LEFTBRACKET = 47
        SCANCODE_LGUI = 227
        SCANCODE_LSHIFT = 225
        SCANCODE_M = 16
        SCANCODE_MAIL = 265
        SCANCODE_MEDIASELECT = 263
        SCANCODE_MENU = 118
        SCANCODE_MINUS = 45
        SCANCODE_MODE = 257
        SCANCODE_MUTE = 127
        SCANCODE_N = 17
        SCANCODE_NONUSBACKSLASH = 100
        SCANCODE_NONUSHASH = 50
        SCANCODE_NUMLOCKCLEAR = 83
        SCANCODE_O = 18
        SCANCODE_OPER = 161
        SCANCODE_OUT = 160
        SCANCODE_P = 19
        SCANCODE_PAGEDOWN = 78
        SCANCODE_PAGEUP = 75
        SCANCODE_PASTE = 125
        SCANCODE_PAUSE = 72
        SCANCODE_PERIOD = 55
        SCANCODE_POWER = 102
        SCANCODE_PRINTSCREEN = 70
        SCANCODE_PRIOR = 157
        SCANCODE_Q = 20
        SCANCODE_R = 21
        SCANCODE_RALT = 230
        SCANCODE_RCTRL = 228
        SCANCODE_RETURN = 40
        SCANCODE_RETURN2 = 158
        SCANCODE_RGUI = 231
        SCANCODE_RIGHT = 79
        SCANCODE_RIGHTBRACKET = 48
        SCANCODE_RSHIFT = 229
        SCANCODE_S = 22
        SCANCODE_SCROLLLOCK = 71
        SCANCODE_SELECT = 119
        SCANCODE_SEMICOLON = 51
        SCANCODE_SEPARATOR = 159
        SCANCODE_SLASH = 56
        SCANCODE_SLEEP = 282
        SCANCODE_SPACE = 44
        SCANCODE_STOP = 120
        SCANCODE_SYSREQ = 154
        SCANCODE_T = 23
        SCANCODE_TAB = 43
        SCANCODE_THOUSANDSSEPARATOR = 178
        SCANCODE_U = 24
        SCANCODE_UNDO = 122
        SCANCODE_UNKNOWN = 0
        SCANCODE_UP = 82
        SCANCODE_V = 25
        SCANCODE_VOLUMEDOWN = 129
        SCANCODE_VOLUMEUP = 128
        SCANCODE_W = 26
        SCANCODE_WWW = 264
        SCANCODE_X = 27
        SCANCODE_Y = 28
        SCANCODE_Z = 29
				SDLK_q = ord('q')
				SDLK_RETURN = 13
				SDLK_BACKSPACE = 8
				SDLK_TAB = 9
				SDLK_ESCAPE = 27
				SDLK_SCANCODE_MASK = 40000000h
				SDLK_LCTRL = SCANCODE_LCTRL + SDLK_SCANCODE_MASK
				SDLK_LSHIFT = SCANCODE_LSHIFT + SDLK_SCANCODE_MASK

    proc GetKeyboardFocus(): *Window
    proc GetKeyboardState(numkeys: *[]integer): *[]byte
    proc GetModState(): Keymod
    proc SetModState(modstate: Keymod)
    proc GetKeyFromScancode(scancode: Scancode): integer
    proc GetScancodeFromKey(key: integer): Scancode
    proc GetScancodeName(scancode: Scancode): *[]char
    proc GetScancodeFromName(name: *[]char): Scancode
    proc GetKeyName(key: integer): *[]char
    proc GetKeyFromName(name: *[]char): integer
    proc StartTextInput
    proc IsTextInputActive(): bool
    proc StopTextInput
    proc SetTextInputRect(rect: *Rect)
    proc HasScreenKeyboardSupport(): bool
    proc IsScreenKeyboardShown(window: *Window): bool

    // from SDL_loadso.h
    proc LoadObject(sofile: *[]char): *void
    proc LoadFunction(handle: *void; name: *[]char): *void
    proc UnloadObject(handle: *void)

    // from SDL_log.h
    type
        __gnuc_va_list = carray 1 of __va_elem
        LogPriority = integer
    const
        LOG_PRIORITY_CRITICAL = 6
        LOG_PRIORITY_DEBUG = 2
        LOG_PRIORITY_ERROR = 5
        LOG_PRIORITY_INFO = 3
        LOG_PRIORITY_VERBOSE = 1
        LOG_PRIORITY_WARN = 4
        NUM_LOG_PRIORITIES = 7

    type
        LogOutputFunction = proc(userdata: *void; category: integer; priority: LogPriority; message: *[]char)

    proc LogSetAllPriority(priority: LogPriority)
    proc LogSetPriority(category: integer; priority: LogPriority)
    proc LogGetPriority(category: integer): LogPriority
    proc LogResetPriorities
    proc Log(fmt: *[]char) [varargs]
    proc LogVerbose(category: integer; fmt: *[]char) [varargs]
    proc LogDebug(category: integer; fmt: *[]char) [varargs]
    proc LogInfo(category: integer; fmt: *[]char) [varargs]
    proc LogWarn(category: integer; fmt: *[]char) [varargs]
    proc LogError(category: integer; fmt: *[]char) [varargs]
    proc LogCritical(category: integer; fmt: *[]char) [varargs]
    proc LogMessage(category: integer; priority: LogPriority; fmt: *[]char) [varargs]
    proc LogMessageV(category: integer; priority: LogPriority; fmt: *[]char; _4: *__va_elem)
    proc LogGetOutputFunction(callback: *[]proc(userdata: *void; category: integer; priority: LogPriority; message: *[]char); userdata: *[]*void)
    proc LogSetOutputFunction(callback: LogOutputFunction; userdata: *void)

    // from SDL_main.h
    //proc main(argc: integer; _2: *[][]char): integer
    proc SetMainReady

    // from SDL_messagebox.h
    type
        MessageBoxFlags = integer
    const
        MESSAGEBOX_ERROR = 16
        MESSAGEBOX_INFORMATION = 64
        MESSAGEBOX_WARNING = 32

    type
        MessageBoxButtonFlags = integer
    const
        MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT = 2
        MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT = 1

    type
        MessageBoxButtonData = cstruct
                flags: integer
                buttonid: integer
                text: *[]char end
        MessageBoxColor = cstruct
                r: byte
                g: byte
                b: byte end
        MessageBoxColorType = (MESSAGEBOX_COLOR_BACKGROUND, MESSAGEBOX_COLOR_TEXT, MESSAGEBOX_COLOR_BUTTON_BORDER, MESSAGEBOX_COLOR_BUTTON_BACKGROUND, MESSAGEBOX_COLOR_BUTTON_SELECTED, MESSAGEBOX_COLOR_MAX)
        MessageBoxColorScheme = cstruct
                colors: carray 5 of MessageBoxColor end
        MessageBoxData = cstruct
                flags: integer
                window: *Window
                title: *[]char
                message: *[]char
                numbuttons: integer
                buttons: *MessageBoxButtonData
                colorScheme: *MessageBoxColorScheme end

    proc ShowMessageBox(messageboxdata: *MessageBoxData; buttonid: *[]integer): integer
    proc ShowSimpleMessageBox(flags: integer; title: *[]char; message: *[]char; window: *Window): integer

    // from SDL_mouse.h
    type
        Cursor = cstruct end
        bool = (FALSE_, TRUE_)
        SystemCursor = (SYSTEM_CURSOR_ARROW, SYSTEM_CURSOR_IBEAM, SYSTEM_CURSOR_WAIT, SYSTEM_CURSOR_CROSSHAIR, SYSTEM_CURSOR_WAITARROW, SYSTEM_CURSOR_SIZENWSE, SYSTEM_CURSOR_SIZENESW, SYSTEM_CURSOR_SIZEWE, SYSTEM_CURSOR_SIZENS, SYSTEM_CURSOR_SIZEALL, SYSTEM_CURSOR_NO, SYSTEM_CURSOR_HAND, NUM_SYSTEM_CURSORS)

	 const 
		 DISABLE = 0
		 ENABLE = 1
		 

    proc GetMouseFocus(): *Window
    proc GetMouseState(x: *[]integer; y: *[]integer): integer
    proc GetRelativeMouseState(x: *[]integer; y: *[]integer): integer
    proc WarpMouseInWindow(window: *Window; x: integer; y: integer)
    proc SetRelativeMouseMode(enabled: bool): integer
    proc GetRelativeMouseMode(): bool
    proc CreateCursor(data: *[]byte; mask: *[]byte; w: integer; h: integer; hot_x: integer; hot_y: integer): *Cursor
    proc CreateColorCursor(surface: *Surface; hot_x: integer; hot_y: integer): *Cursor
    proc CreateSystemCursor(id: SystemCursor): *Cursor
    proc SetCursor(cursor: *Cursor)
    proc GetCursor(): *Cursor
    proc GetDefaultCursor(): *Cursor
    proc FreeCursor(cursor: *Cursor)
    proc ShowCursor(toggle: integer): integer

    // from SDL_mutex.h
    type
        mutex = cstruct end
        semaphore = cstruct end
        cond = cstruct end

    proc CreateMutex(): *mutex
    proc LockMutex(mutex: *mutex): integer
    proc TryLockMutex(mutex: *mutex): integer
    proc UnlockMutex(mutex: *mutex): integer
    proc DestroyMutex(mutex: *mutex)
    proc CreateSemaphore(initial_value: integer): *semaphore
    proc DestroySemaphore(sem: *semaphore)
    proc SemWait(sem: *semaphore): integer
    proc SemTryWait(sem: *semaphore): integer
    proc SemWaitTimeout(sem: *semaphore; ms: integer): integer
    proc SemPost(sem: *semaphore): integer
    proc SemValue(sem: *semaphore): integer
    proc CreateCond(): *cond
    proc DestroyCond(cond: *cond)
    proc CondSignal(cond: *cond): integer
    proc CondBroadcast(cond: *cond): integer
    proc CondWait(cond: *cond; mutex: *mutex): integer
    proc CondWaitTimeout(cond: *cond; mutex: *mutex; ms: integer): integer

    // from SDL_pixels.h
    type
        Color = cstruct
                r: byte
                g: byte
                b: byte
                a: byte end
        Palette = cstruct
                ncolors: integer
                colors: *Color
                version: integer
                refcount: integer end
        PixelFormat = cstruct
                format: integer
                palette: *Palette
                BitsPerPixel: byte
                BytesPerPixel: byte
                padding: carray 2 of byte
                Rmask: integer
                Gmask: integer
                Bmask: integer
                Amask: integer
                Rloss: byte
                Gloss: byte
                Bloss: byte
                Aloss: byte
                Rshift: byte
                Gshift: byte
                Bshift: byte
                Ashift: byte
                refcount: integer
                next: *PixelFormat end

    proc GetPixelFormatName(format: integer): *[]char
    proc PixelFormatEnumToMasks(format: integer; bpp: *[]integer; Rmask: *[]integer; Gmask: *[]integer; Bmask: *[]integer; Amask: *[]integer): bool
    proc MasksToPixelFormatEnum(bpp: integer; Rmask: integer; Gmask: integer; Bmask: integer; Amask: integer): integer
    proc AllocFormat(pixel_format: integer): *PixelFormat
    proc FreeFormat(format: *PixelFormat)
    proc AllocPalette(ncolors: integer): *Palette
    proc SetPixelFormatPalette(format: *PixelFormat; palette: *Palette): integer
    proc SetPaletteColors(palette: *Palette; colors: *Color; firstcolor: integer; ncolors: integer): integer
    proc FreePalette(palette: *Palette)
    proc MapRGB(format: *PixelFormat; r: byte; g: byte; b: byte): integer
    proc MapRGBA(format: *PixelFormat; r: byte; g: byte; b: byte; a: byte): integer
    proc GetRGB(pixel: integer; format: *PixelFormat; r: *[]byte; g: *[]byte; b: *[]byte)
    proc GetRGBA(pixel: integer; format: *PixelFormat; r: *[]byte; g: *[]byte; b: *[]byte; a: *[]byte)
    proc CalculateGammaRamp(gamma: real; ramp: *[]shortint)

    // from SDL_platform.h
    proc GetPlatform(): *[]char

    // from SDL_power.h
    type
        PowerState = (POWERSTATE_UNKNOWN, POWERSTATE_ON_BATTERY, POWERSTATE_NO_BATTERY, POWERSTATE_CHARGING, POWERSTATE_CHARGED)

    proc GetPowerInfo(secs: *[]integer; pct: *[]integer): PowerState

    // from SDL_rect.h
    type
        Point = cstruct
                x: integer
                y: integer end

    proc HasIntersection(A: *Rect; B: *Rect): bool
    proc IntersectRect(A: *Rect; B: *Rect; result: *Rect): bool
    proc UnionRect(A: *Rect; B: *Rect; result: *Rect)
    proc EnclosePoints(points: *Point; count: integer; clip: *Rect; result: *Rect): bool
    proc IntersectRectAndLine(rect: *Rect; X1: *[]integer; Y1: *[]integer; X2: *[]integer; Y2: *[]integer): bool

    // from SDL_render.h
    type
        RendererFlags = integer
    const
        RENDERER_ACCELERATED = 2
        RENDERER_PRESENTVSYNC = 4
        RENDERER_SOFTWARE = 1
        RENDERER_TARGETTEXTURE = 8

    type
        RendererInfo = cstruct
                name: *[]char
                flags: integer
                num_texture_formats: integer
                texture_formats: carray 16 of integer
                max_texture_width: integer
                max_texture_height: integer end
        TextureAccess = (TEXTUREACCESS_STATIC, TEXTUREACCESS_STREAMING, TEXTUREACCESS_TARGET)
        TextureModulate = (TEXTUREMODULATE_NONE, TEXTUREMODULATE_COLOR, TEXTUREMODULATE_ALPHA)
        Renderer = cstruct end
        Texture = cstruct end
        BlendMode = integer
    const
        BLENDMODE_ADD = 2
        BLENDMODE_BLEND = 1
        BLENDMODE_MOD = 4
        BLENDMODE_NONE = 0
        
        PIXELFORMAT_ARGB8888 = 16362004h

    type
        RendererFlip = (FLIP_NONE, FLIP_HORIZONTAL, FLIP_VERTICAL)

    proc GetNumRenderDrivers(): integer
    proc GetRenderDriverInfo(index: integer; info: *RendererInfo): integer
    proc CreateWindowAndRenderer(width: integer; height: integer; window_flags: integer; window: *[]*Window; renderer: *[]*Renderer): integer
    proc CreateRenderer(window: *Window; index: integer; flags: integer): *Renderer
    proc CreateSoftwareRenderer(surface: *Surface): *Renderer
    proc GetRenderer(window: *Window): *Renderer
    proc GetRendererInfo(renderer: *Renderer; info: *RendererInfo): integer
    proc GetRendererOutputSize(renderer: *Renderer; w: *[]integer; h: *[]integer): integer
    proc CreateTexture(renderer: *Renderer; format: integer; access: integer; w: integer; h: integer): *Texture
    proc CreateTextureFromSurface(renderer: *Renderer; surface: *Surface): *Texture
    proc QueryTexture(texture: *Texture; format: *[]integer; access: *[]integer; w: *[]integer; h: *[]integer): integer
    proc SetTextureColorMod(texture: *Texture; r: byte; g: byte; b: byte): integer
    proc GetTextureColorMod(texture: *Texture; r: *[]byte; g: *[]byte; b: *[]byte): integer
    proc SetTextureAlphaMod(texture: *Texture; alpha: byte): integer
    proc GetTextureAlphaMod(texture: *Texture; alpha: *[]byte): integer
    proc SetTextureBlendMode(texture: *Texture; blendMode: BlendMode): integer
    proc GetTextureBlendMode(texture: *Texture; blendMode: *[]BlendMode): integer
    proc UpdateTexture(texture: *Texture; rect: *Rect; pixels: *void; pitch: integer): integer
    proc UpdateYUVTexture(texture: *Texture; rect: *Rect; Yplane: *[]byte; Ypitch: integer; Uplane: *[]byte; Upitch: integer; Vplane: *[]byte; Vpitch: integer): integer
    proc LockTexture(texture: *Texture; rect: *Rect; pixels: *[]*void; pitch: *[]integer): integer
    proc UnlockTexture(texture: *Texture)
    proc RenderTargetSupported(renderer: *Renderer): bool
    proc SetRenderTarget(renderer: *Renderer; texture: *Texture): integer
    proc GetRenderTarget(renderer: *Renderer): *Texture
    proc RenderSetLogicalSize(renderer: *Renderer; w: integer; h: integer): integer
    proc RenderGetLogicalSize(renderer: *Renderer; w: *[]integer; h: *[]integer)
    proc RenderSetViewport(renderer: *Renderer; rect: *Rect): integer
    proc RenderGetViewport(renderer: *Renderer; rect: *Rect)
    proc RenderSetClipRect(renderer: *Renderer; rect: *Rect): integer
    proc RenderGetClipRect(renderer: *Renderer; rect: *Rect)
    proc RenderSetScale(renderer: *Renderer; scaleX: real; scaleY: real): integer
    proc RenderGetScale(renderer: *Renderer; scaleX: *[]real; scaleY: *[]real)
    proc SetRenderDrawColor(renderer: *Renderer; r: byte; g: byte; b: byte; a: byte): integer
    proc GetRenderDrawColor(renderer: *Renderer; r: *[]byte; g: *[]byte; b: *[]byte; a: *[]byte): integer
    proc SetRenderDrawBlendMode(renderer: *Renderer; blendMode: BlendMode): integer
    proc GetRenderDrawBlendMode(renderer: *Renderer; blendMode: *[]BlendMode): integer
    proc RenderClear(renderer: *Renderer): integer
    proc RenderDrawPoint(renderer: *Renderer; x: integer; y: integer): integer
    proc RenderDrawPoints(renderer: *Renderer; points: *Point; count: integer): integer
    proc RenderDrawLine(renderer: *Renderer; x1: integer; y1: integer; x2: integer; y2: integer): integer
    proc RenderDrawLines(renderer: *Renderer; points: *Point; count: integer): integer
    proc RenderDrawRect(renderer: *Renderer; rect: *Rect): integer
    proc RenderDrawRects(renderer: *Renderer; rects: *Rect; count: integer): integer
    proc RenderFillRect(renderer: *Renderer; rect: *Rect): integer
    proc RenderFillRects(renderer: *Renderer; rects: *Rect; count: integer): integer
    proc RenderCopy(renderer: *Renderer; texture: *Texture; srcrect: *Rect; dstrect: *Rect): integer
    proc RenderCopyEx(renderer: *Renderer; texture: *Texture; srcrect: *Rect; dstrect: *Rect; angle: longreal; center: *Point; flip: RendererFlip): integer
    proc RenderReadPixels(renderer: *Renderer; rect: *Rect; format: integer; pixels: *void; pitch: integer): integer
    proc RenderPresent(renderer: *Renderer)
    proc DestroyTexture(texture: *Texture)
    proc DestroyRenderer(renderer: *Renderer)
    proc GL_BindTexture(texture: *Texture; texw: *[]real; texh: *[]real): integer
    proc GL_UnbindTexture(texture: *Texture): integer

    // from SDL_rwops.h
    type
        RWops = cstruct
                size: proc(context: *RWops): integer
                seek: proc(context: *RWops; offset: integer; whence: integer): integer
                read: proc(context: *RWops; ptr: *void; size: integer; maxnum: integer): integer
                write: proc(context: *RWops; ptr: *void; size: integer; num: integer): integer
                close_: proc(context: *RWops): integer
                type_: integer
                hidden: cunion
    mem: cstruct
    base: *[]byte
    here: *[]byte
    stop: *[]byte end
    unknown: cstruct
    data1: *void
    data2: *void end end end
        size_t = integer

    proc RWFromFile(file: *[]char; mode: *[]char): *RWops
    proc RWFromFP(fp: *void; autoclose: bool): *RWops
    proc RWFromMem(mem: *void; size: integer): *RWops
    proc RWFromConstMem(mem: *void; size: integer): *RWops
    proc AllocRW(): *RWops
    proc FreeRW(area: *RWops)
    proc ReadU8(src: *RWops): byte
    proc ReadLE16(src: *RWops): shortint
    proc ReadBE16(src: *RWops): shortint
    proc ReadLE32(src: *RWops): integer
    proc ReadBE32(src: *RWops): integer
    proc ReadLE64(src: *RWops): integer
    proc ReadBE64(src: *RWops): integer
    proc WriteU8(dst: *RWops; value: byte): integer
    proc WriteLE16(dst: *RWops; value: shortint): integer
    proc WriteBE16(dst: *RWops; value: shortint): integer
    proc WriteLE32(dst: *RWops; value: integer): integer
    proc WriteBE32(dst: *RWops; value: integer): integer
    proc WriteLE64(dst: *RWops; value: integer): integer
    proc WriteBE64(dst: *RWops; value: integer): integer

    // from SDL_stdinc.h
    type
        dummy_uint32 = carray 1 of integer
        Sint8 = char
        DUMMY_ENUM = (DUMMY_ENUM_VALUE)
        iconv_t = *void

    proc malloc(size: integer): *void
    proc calloc(nmemb: integer; size: integer): *void
    proc realloc(mem: *void; size: integer): *void
    proc free(mem: *void)
    proc getenv(name: *[]char): *[]char
    proc setenv(name: *[]char; value: *[]char; overwrite: integer): integer
    proc qsort(base: *void; nmemb: integer; size: integer; compare: proc(_1: *void; _2: *void): integer)
    proc abs(x: integer): integer
    proc isdigit(x: integer): integer
    proc isspace(x: integer): integer
    proc toupper(x: integer): integer
    proc tolower(x: integer): integer
    proc memset(dst: *void; c: integer; len: integer): *void
    proc memcpy(dst: *void; src: *void; len: integer): *void
    proc memmove(dst: *void; src: *void; len: integer): *void
    proc memcmp(s1: *void; s2: *void; len: integer): integer
    proc wcslen(wstr: *[]integer): integer
    proc wcslcpy(dst: *[]integer; src: *[]integer; maxlen: integer): integer
    proc wcslcat(dst: *[]integer; src: *[]integer; maxlen: integer): integer
    proc strlen(str: *[]char): integer
    proc strlcpy(dst: *[]char; src: *[]char; maxlen: integer): integer
    proc utf8strlcpy(dst: *[]char; src: *[]char; dst_bytes: integer): integer
    proc strlcat(dst: *[]char; src: *[]char; maxlen: integer): integer
    proc strdup(str: *[]char): *[]char
    proc strrev(str: *[]char): *[]char
    proc strupr(str: *[]char): *[]char
    proc strlwr(str: *[]char): *[]char
    proc strchr(str: *[]char; c: integer): *[]char
    proc strrchr(str: *[]char; c: integer): *[]char
    proc strstr(haystack: *[]char; needle: *[]char): *[]char
    proc itoa(value: integer; str: *[]char; radix: integer): *[]char
    proc uitoa(value: integer; str: *[]char; radix: integer): *[]char
    proc ltoa(value: integer; str: *[]char; radix: integer): *[]char
    proc ultoa(value: integer; str: *[]char; radix: integer): *[]char
    proc lltoa(value: integer; str: *[]char; radix: integer): *[]char
    proc ulltoa(value: integer; str: *[]char; radix: integer): *[]char
    proc atoi(str: *[]char): integer
    proc atof(str: *[]char): longreal
    proc strtol(str: *[]char; endp: *[]*[]char; base: integer): integer
    proc strtoul(str: *[]char; endp: *[]*[]char; base: integer): integer
    proc strtoll(str: *[]char; endp: *[]*[]char; base: integer): integer
    proc strtoull(str: *[]char; endp: *[]*[]char; base: integer): integer
    proc strtod(str: *[]char; endp: *[]*[]char): longreal
    proc strcmp(str1: *[]char; str2: *[]char): integer
    proc strncmp(str1: *[]char; str2: *[]char; maxlen: integer): integer
    proc strcasecmp(str1: *[]char; str2: *[]char): integer
    proc strncasecmp(str1: *[]char; str2: *[]char; len: integer): integer
    proc sscanf(text: *[]char; fmt: *[]char): integer [varargs]
    proc vsscanf(text: *[]char; fmt: *[]char; _3: *__va_elem): integer
    proc snprintf(text: *[]char; maxlen: integer; fmt: *[]char): integer [varargs]
    proc vsnprintf(text: *[]char; maxlen: integer; fmt: *[]char; _4: *__va_elem): integer
    proc acos(x: longreal): longreal
    proc asin(x: longreal): longreal
    proc atan(x: longreal): longreal
    proc atan2(x: longreal; y: longreal): longreal
    proc ceil(x: longreal): longreal
    proc copysign(x: longreal; y: longreal): longreal
    proc cos(x: longreal): longreal
    proc cosf(x: real): real
    proc fabs(x: longreal): longreal
    proc floor(x: longreal): longreal
    proc log(x: longreal): longreal
    proc pow(x: longreal; y: longreal): longreal
    proc scalbn(x: longreal; n: integer): longreal
    proc sin(x: longreal): longreal
    proc sinf(x: real): real
    proc sqrt(x: longreal): longreal
    proc iconv_open(tocode: *[]char; fromcode: *[]char): iconv_t
    proc iconv_close(cd: iconv_t): integer
    proc iconv(cd: iconv_t; inbuf: *[]*[]char; inbytesleft: *[]integer; outbuf: *[]*[]char; outbytesleft: *[]integer): integer
    proc iconv_string(tocode: *[]char; fromcode: *[]char; inbuf: *[]char; inbytesleft: integer): *[]char

    // from SDL_surface.h
    type
        Rect = cstruct
                x: integer
                y: integer
                w: integer
                h: integer end
        Surface = cstruct
                flags: integer
                format: *PixelFormat
                w: integer
                h: integer
                pitch: integer
                pixels: *void
                userdata: *void
                locked: integer
                lock_data: *void
                clip_rect: Rect
                map: *void
                refcount: integer end
        blit = proc(src: *Surface; srcrect: *Rect; dst: *Surface; dstrect: *Rect): integer

    proc CreateRGBSurface(flags: integer; width: integer; height: integer; depth: integer; Rmask: integer; Gmask: integer; Bmask: integer; Amask: integer): *Surface
    proc CreateRGBSurfaceFrom(pixels: *void; width: integer; height: integer; depth: integer; pitch: integer; Rmask: integer; Gmask: integer; Bmask: integer; Amask: integer): *Surface
    proc FreeSurface(surface: *Surface)
    proc SetSurfacePalette(surface: *Surface; palette: *Palette): integer
    proc LockSurface(surface: *Surface): integer
    proc UnlockSurface(surface: *Surface)
    proc LoadBMP_RW(src: *RWops; freesrc: integer): *Surface
    proc SaveBMP_RW(surface: *Surface; dst: *RWops; freedst: integer): integer
    proc SetSurfaceRLE(surface: *Surface; flag: integer): integer
    proc SetColorKey(surface: *Surface; flag: integer; key: integer): integer
    proc GetColorKey(surface: *Surface; key: *[]integer): integer
    proc SetSurfaceColorMod(surface: *Surface; r: byte; g: byte; b: byte): integer
    proc GetSurfaceColorMod(surface: *Surface; r: *[]byte; g: *[]byte; b: *[]byte): integer
    proc SetSurfaceAlphaMod(surface: *Surface; alpha: byte): integer
    proc GetSurfaceAlphaMod(surface: *Surface; alpha: *[]byte): integer
    proc SetSurfaceBlendMode(surface: *Surface; blendMode: BlendMode): integer
    proc GetSurfaceBlendMode(surface: *Surface; blendMode: *[]BlendMode): integer
    proc SetClipRect(surface: *Surface; rect: *Rect): bool
    proc GetClipRect(surface: *Surface; rect: *Rect)
    proc ConvertSurface(src: *Surface; fmt: *PixelFormat; flags: integer): *Surface
    proc ConvertSurfaceFormat(src: *Surface; pixel_format: integer; flags: integer): *Surface
    proc ConvertPixels(width: integer; height: integer; src_format: integer; src: *void; src_pitch: integer; dst_format: integer; dst: *void; dst_pitch: integer): integer
    proc FillRect(dst: *Surface; rect: *Rect; color: integer): integer
    proc FillRects(dst: *Surface; rects: *Rect; count: integer; color: integer): integer
    proc UpperBlit(src: *Surface; srcrect: *Rect; dst: *Surface; dstrect: *Rect): integer
    proc LowerBlit(src: *Surface; srcrect: *Rect; dst: *Surface; dstrect: *Rect): integer
    proc SoftStretch(src: *Surface; srcrect: *Rect; dst: *Surface; dstrect: *Rect): integer
    proc UpperBlitScaled(src: *Surface; srcrect: *Rect; dst: *Surface; dstrect: *Rect): integer
    proc LowerBlitScaled(src: *Surface; srcrect: *Rect; dst: *Surface; dstrect: *Rect): integer

    // from SDL_thread.h
    type
        Thread = cstruct end
        ThreadFunction = proc(data: *void): integer
        ThreadPriority = (THREAD_PRIORITY_LOW, THREAD_PRIORITY_NORMAL, THREAD_PRIORITY_HIGH)

    proc CreateThread(fn: ThreadFunction; name: *[]char; data: *void): *Thread
    proc GetThreadName(thread: *Thread): *[]char
    proc ThreadID(): integer
    proc GetThreadID(thread: *Thread): integer
    proc SetThreadPriority(priority: ThreadPriority): integer
    proc WaitThread(thread: *Thread; status: *[]integer)
    proc DetachThread(thread: *Thread)
    proc TLSCreate(): integer
    proc TLSGet(id: integer): *void
    proc TLSSet(id: integer; value: *void; destructor: proc(_1: *void)): integer

    // from SDL_timer.h
    type
        TimerCallback = proc(interval: integer; param: *void): integer
        SpinLock = integer

    proc GetTicks(): integer
    proc GetPerformanceCounter(): integer
    proc GetPerformanceFrequency(): integer
    proc Delay(ms: integer)
    proc AddTimer(interval: integer; callback: TimerCallback; param: *void): integer
    proc RemoveTimer(id: integer): bool

    // from SDL_touch.h
    type
        Finger = cstruct
                id: integer
                x: real
                y: real
                pressure: real end

    proc GetNumTouchDevices(): integer
    proc GetTouchDevice(index: integer): integer
    proc GetNumTouchFingers(touchID: integer): integer
    proc GetTouchFinger(touchID: integer; index: integer): *Finger

    // from SDL_version.h
    type
        uint8_t = byte
        version = cstruct
                major: byte
                minor: byte
                patch: byte end

    proc GetVersion(ver: *version)
    proc GetRevision(): *[]char
    proc GetRevisionNumber(): integer

    // from SDL_video.h
    type
        DisplayMode = cstruct
                format: integer
                w: integer
                h: integer
                refresh_rate: integer
                driverdata: *void end
        Window = cstruct end
        WindowFlags = integer
    const
        WINDOW_ALLOW_HIGHDPI = 8192
        WINDOW_BORDERLESS = 16
        WINDOW_FOREIGN = 2048
        WINDOW_FULLSCREEN = 1
        WINDOW_FULLSCREEN_DESKTOP = 4097
        WINDOW_HIDDEN = 8
        WINDOW_INPUT_FOCUS = 512
        WINDOW_INPUT_GRABBED = 256
        WINDOW_MAXIMIZED = 128
        WINDOW_MINIMIZED = 64
        WINDOW_MOUSE_FOCUS = 1024
        WINDOW_OPENGL = 2
        WINDOW_RESIZABLE = 32
        WINDOW_SHOWN = 4

		  WINDOWPOS_UNDEFINED =	1FFF0000h;
		  WINDOWPOS_CENTERED =	2FFF0000h;

    type
        WindowEventID = (WINDOWEVENT_NONE, WINDOWEVENT_SHOWN, WINDOWEVENT_HIDDEN, WINDOWEVENT_EXPOSED, WINDOWEVENT_MOVED, WINDOWEVENT_RESIZED, WINDOWEVENT_SIZE_CHANGED, WINDOWEVENT_MINIMIZED, WINDOWEVENT_MAXIMIZED, WINDOWEVENT_RESTORED, WINDOWEVENT_ENTER, WINDOWEVENT_LEAVE, WINDOWEVENT_FOCUS_GAINED, WINDOWEVENT_FOCUS_LOST, WINDOWEVENT_CLOSE)
        GLprofile = integer
    const
        GL_CONTEXT_PROFILE_COMPATIBILITY = 2
        GL_CONTEXT_PROFILE_CORE = 1
        GL_CONTEXT_PROFILE_ES = 4

    type
        GLcontextFlag = integer
    const
        GL_CONTEXT_DEBUG_FLAG = 1
        GL_CONTEXT_FORWARD_COMPATIBLE_FLAG = 2
        GL_CONTEXT_RESET_ISOLATION_FLAG = 8
        GL_CONTEXT_ROBUST_ACCESS_FLAG = 4

    type
        GLattr = (GL_RED_SIZE, GL_GREEN_SIZE, GL_BLUE_SIZE, GL_ALPHA_SIZE, GL_BUFFER_SIZE, GL_DOUBLEBUFFER, GL_DEPTH_SIZE, GL_STENCIL_SIZE, GL_ACCUM_RED_SIZE, GL_ACCUM_GREEN_SIZE, GL_ACCUM_BLUE_SIZE, GL_ACCUM_ALPHA_SIZE, GL_STEREO, GL_MULTISAMPLEBUFFERS, GL_MULTISAMPLESAMPLES, GL_ACCELERATED_VISUAL, GL_RETAINED_BACKING, GL_CONTEXT_MAJOR_VERSION, GL_CONTEXT_MINOR_VERSION, GL_CONTEXT_EGL, GL_CONTEXT_FLAGS, GL_CONTEXT_PROFILE_MASK, GL_SHARE_WITH_CURRENT_CONTEXT, GL_FRAMEBUFFER_SRGB_CAPABLE)
        GLContext = *void

    proc GetNumVideoDrivers(): integer
    proc GetVideoDriver(index: integer): *[]char
    proc VideoInit(driver_name: *[]char): integer
    proc VideoQuit
    proc GetCurrentVideoDriver(): *[]char
    proc GetNumVideoDisplays(): integer
    proc GetDisplayName(displayIndex: integer): *[]char
    proc GetDisplayBounds(displayIndex: integer; rect: *Rect): integer
    proc GetNumDisplayModes(displayIndex: integer): integer
    proc GetDisplayMode(displayIndex: integer; modeIndex: integer; mode: *DisplayMode): integer
    proc GetDesktopDisplayMode(displayIndex: integer; mode: *DisplayMode): integer
    proc GetCurrentDisplayMode(displayIndex: integer; mode: *DisplayMode): integer
    proc GetClosestDisplayMode(displayIndex: integer; mode: *DisplayMode; closest: *DisplayMode): *DisplayMode
    proc GetWindowDisplayIndex(window: *Window): integer
    proc SetWindowDisplayMode(window: *Window; mode: *DisplayMode): integer
    proc GetWindowDisplayMode(window: *Window; mode: *DisplayMode): integer
    proc GetWindowPixelFormat(window: *Window): integer
    proc CreateWindow(title: *[]char; x: integer; y: integer; w: integer; h: integer; flags: integer): *Window
    proc CreateWindowFrom(data: *void): *Window
    proc GetWindowID(window: *Window): integer
    proc GetWindowFromID(id: integer): *Window
    proc GetWindowFlags(window: *Window): integer
    proc SetWindowTitle(window: *Window; title: *[]char)
    proc GetWindowTitle(window: *Window): *[]char
    proc SetWindowIcon(window: *Window; icon: *Surface)
    proc SetWindowData(window: *Window; name: *[]char; userdata: *void): *void
    proc GetWindowData(window: *Window; name: *[]char): *void
    proc SetWindowPosition(window: *Window; x: integer; y: integer)
    proc GetWindowPosition(window: *Window; x: *[]integer; y: *[]integer)
    proc SetWindowSize(window: *Window; w: integer; h: integer)
    proc GetWindowSize(window: *Window; w: *[]integer; h: *[]integer)
    proc SetWindowMinimumSize(window: *Window; min_w: integer; min_h: integer)
    proc GetWindowMinimumSize(window: *Window; w: *[]integer; h: *[]integer)
    proc SetWindowMaximumSize(window: *Window; max_w: integer; max_h: integer)
    proc GetWindowMaximumSize(window: *Window; w: *[]integer; h: *[]integer)
    proc SetWindowBordered(window: *Window; bordered: bool)
    proc ShowWindow(window: *Window)
    proc HideWindow(window: *Window)
    proc RaiseWindow(window: *Window)
    proc MaximizeWindow(window: *Window)
    proc MinimizeWindow(window: *Window)
    proc RestoreWindow(window: *Window)
    proc SetWindowFullscreen(window: *Window; flags: integer): integer
    proc GetWindowSurface(window: *Window): *Surface
    proc UpdateWindowSurface(window: *Window): integer
    proc UpdateWindowSurfaceRects(window: *Window; rects: *Rect; numrects: integer): integer
    proc SetWindowGrab(window: *Window; grabbed: bool)
    proc GetWindowGrab(window: *Window): bool
    proc SetWindowBrightness(window: *Window; brightness: real): integer
    proc GetWindowBrightness(window: *Window): real
    proc SetWindowGammaRamp(window: *Window; red: *[]shortint; green: *[]shortint; blue: *[]shortint): integer
    proc GetWindowGammaRamp(window: *Window; red: *[]shortint; green: *[]shortint; blue: *[]shortint): integer
    proc DestroyWindow(window: *Window)
    proc IsScreenSaverEnabled(): bool
    proc EnableScreenSaver
    proc DisableScreenSaver
    proc GL_LoadLibrary(path: *[]char): integer
    proc GL_GetProcAddress(proc_: *[]char): *void
    proc GL_UnloadLibrary
    proc GL_ExtensionSupported(extension: *[]char): bool
    proc GL_ResetAttributes
    proc GL_SetAttribute(attr: GLattr; value: integer): integer
    proc GL_GetAttribute(attr: GLattr; value: *[]integer): integer
    proc GL_CreateContext(window: *Window): GLContext
    proc GL_MakeCurrent(window: *Window; context: GLContext): integer
    proc GL_GetCurrentWindow(): *Window
    proc GL_GetCurrentContext(): GLContext
    proc GL_GetDrawableSize(window: *Window; w: *[]integer; h: *[]integer)
    proc GL_SetSwapInterval(interval: integer): integer
    proc GL_GetSwapInterval(): integer
    proc GL_SwapWindow(window: *Window)
    proc GL_DeleteContext(context: GLContext)

    // from stdarg.h
    type
        __va_elem = cstruct
                gp_offset: integer
                fp_offset: integer
                overflow_arg_area: *void
                reg_save_area: *void end

end SDL
