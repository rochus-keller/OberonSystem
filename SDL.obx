// Generated by C2OBX 2022-02-06 on 2022-03-11T19:21:07

(*
  Simple DirectMedia Layer
  Copyright (C) 1997-2020 Sam Lantinga <slouken@libsdl.org>

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.
*)

(* 
	This file was generated from SDL v2.0.14 using C2OBX 
   (see https://github.com/rochus-keller/c2obx/) and then
   slightly adjusted by me@rochus-keller.ch 
*)

definition SDL [extern 'C', dll 'SDL2', prefix 'SDL_']

    // from SDL.h
    const
        INIT_TIMER = 00000001h
        INIT_AUDIO = 00000010h
        INIT_VIDEO = 00000020h
        INIT_JOYSTICK = 00000200h
        INIT_HAPTIC = 00001000h
        INIT_GAMECONTROLLER = 00002000h
        INIT_EVENTS = 00004000h
        INIT_SENSOR = 00008000h
        INIT_NOPARACHUTE = 00100000h
        INIT_EVERYTHING = bitor(bitor(bitor(bitor(bitor(bitor(bitor(00000001h, 00000010h), 00000020h), 00004000h), 00000200h), 00001000h), 00002000h), 00008000h)

    proc Init(flags: Uint32): integer
    proc InitSubSystem(flags: Uint32): integer
    proc QuitSubSystem(flags: Uint32)
    proc WasInit(flags: Uint32): Uint32
    proc Quit

    // from assert.h
    const
        ASSERT_LEVEL = 1
        FUNCTION = nil // CHECK "???"
        FILE = nil // CHECK "/home/me/Desktop/SDL2-2.0.14/include/assert.h"
        LINE = 76
        NULL_WHILE_LOOP_CONDITION = 0
        assert_state = nil // CHECK AssertState
        assert_data = nil // CHECK AssertData

    type
        AssertState = (ASSERTION_RETRY, ASSERTION_BREAK, ASSERTION_ABORT, ASSERTION_IGNORE, ASSERTION_ALWAYS_IGNORE)
        AssertData = cstruct
                        always_ignore: integer
                        trigger_count: Uint32
                        condition: *[]char
                        filename: *[]char
                        linenum: integer
                        function: *[]char
                        next: *AssertData end
        AssertionHandler = proc(data: *AssertData; userdata: *void): AssertState

    proc ReportAssertion(_1: *AssertData; _2: *[]char; _3: *[]char; _4: integer): AssertState
    proc SetAssertionHandler(handler: AssertionHandler; userdata: *void)
    proc GetDefaultAssertionHandler(): AssertionHandler
    proc GetAssertionHandler(puserdata: *[]*void): AssertionHandler
    proc GetAssertionReport(): *AssertData
    proc ResetAssertionReport

    // from atomic.h
    type
        atomic_t = cstruct
                        value: integer end
        SpinLock = int32_t

    proc AtomicTryLock(lock: *[]integer): bool
    proc AtomicLock(lock: *[]integer)
    proc AtomicUnlock(lock: *[]integer)
    proc MemoryBarrierReleaseFunction
    proc MemoryBarrierAcquireFunction
    proc AtomicCAS(a: *atomic_t; oldval: integer; newval: integer): bool
    proc AtomicSet(a: *atomic_t; v: integer): integer
    proc AtomicGet(a: *atomic_t): integer
    proc AtomicAdd(a: *atomic_t; v: integer): integer
    proc AtomicCASPtr(a: *[]*void; oldval: *void; newval: *void): bool
    proc AtomicSetPtr(a: *[]*void; v: *void): *void
    proc AtomicGetPtr(a: *[]*void): *void

    // from audio.h
    const
        AUDIO_MASK_BITSIZE = 0FFh
        AUDIO_MASK_DATATYPE = lsl(1, 8)
        AUDIO_MASK_ENDIAN = lsl(1, 12)
        AUDIO_MASK_SIGNED = lsl(1, 15)
        AUDIO_U8 = 0008h
        AUDIO_S8 = 8008h
        AUDIO_U16LSB = 0010h
        AUDIO_S16LSB = 8010h
        AUDIO_U16MSB = 1010h
        AUDIO_S16MSB = 9010h
        AUDIO_U16 = 0010h
        AUDIO_S16 = 8010h
        AUDIO_S32LSB = 8020h
        AUDIO_S32MSB = 9020h
        AUDIO_S32 = 8020h
        AUDIO_F32LSB = 8120h
        AUDIO_F32MSB = 9120h
        AUDIO_F32 = 8120h
        AUDIO_U16SYS = 0010h
        AUDIO_S16SYS = 8010h
        AUDIO_S32SYS = 8020h
        AUDIO_F32SYS = 8120h
        AUDIO_ALLOW_FREQUENCY_CHANGE = 00000001h
        AUDIO_ALLOW_FORMAT_CHANGE = 00000002h
        AUDIO_ALLOW_CHANNELS_CHANGE = 00000004h
        AUDIO_ALLOW_SAMPLES_CHANGE = 00000008h
        AUDIO_ALLOW_ANY_CHANGE = bitor(bitor(bitor(00000001h, 00000002h), 00000004h), 00000008h)
        AUDIOCVT_MAX_FILTERS = 9
        MIX_MAXVOLUME = 128

    type
        AudioCallback = proc(userdata: *void; stream: *[]Uint8; len: integer)
        AudioSpec = cstruct
                        freq: integer
                        format: Uint16
                        channels: Uint8
                        silence: Uint8
                        samples: Uint16
                        padding: Uint16
                        size: Uint32
                        callback: AudioCallback
                        userdata: *void end
        AudioFilter = proc(cvt: *AudioCVT; format: AudioFormat)
        AudioCVT = cstruct
                        needed: integer
                        src_format: Uint16
                        dst_format: Uint16
                        rate_incr: longreal
                        buf: *[]Uint8
                        len: integer
                        len_cvt: integer
                        len_mult: integer
                        len_ratio: longreal
                        filters: carray 10 of AudioFilter
                        filter_index: integer end
        AudioStatus = (AUDIO_STOPPED, AUDIO_PLAYING, AUDIO_PAUSED)
        AudioStream = cstruct end
        AudioFormat = uint16_t
        AudioDeviceID = wchar_t

    proc GetNumAudioDrivers(): integer
    proc GetAudioDriver(index: integer): *[]char
    proc AudioInit(driver_name: *[]char): integer
    proc AudioQuit
    proc GetCurrentAudioDriver(): *[]char
    proc OpenAudio(desired: *AudioSpec; obtained: *AudioSpec): integer
    proc GetNumAudioDevices(iscapture: integer): integer
    proc GetAudioDeviceName(index: integer; iscapture: integer): *[]char
    proc OpenAudioDevice(device: *[]char; iscapture: integer; desired: *AudioSpec; obtained: *AudioSpec; allowed_changes: integer): Uint32
    proc GetAudioStatus(): AudioStatus
    proc GetAudioDeviceStatus(dev: AudioDeviceID): AudioStatus
    proc PauseAudio(pause_on: integer)
    proc PauseAudioDevice(dev: AudioDeviceID; pause_on: integer)
    proc LoadWAV_RW(src: *RWops; freesrc: integer; spec: *AudioSpec; audio_buf: *[]*[]byte; audio_len: *[]Uint32): *AudioSpec
    proc FreeWAV(audio_buf: *[]Uint8)
    proc BuildAudioCVT(cvt: *AudioCVT; src_format: AudioFormat; src_channels: Uint8; src_rate: integer; dst_format: AudioFormat; dst_channels: Uint8; dst_rate: integer): integer
    proc ConvertAudio(cvt: *AudioCVT): integer
    proc NewAudioStream(src_format: AudioFormat; src_channels: Uint8; src_rate: integer; dst_format: AudioFormat; dst_channels: Uint8; dst_rate: integer): *AudioStream
    proc AudioStreamPut(stream: *AudioStream; buf: *void; len: integer): integer
    proc AudioStreamGet(stream: *AudioStream; buf: *void; len: integer): integer
    proc AudioStreamAvailable(stream: *AudioStream): integer
    proc AudioStreamFlush(stream: *AudioStream): integer
    proc AudioStreamClear(stream: *AudioStream)
    proc FreeAudioStream(stream: *AudioStream)
    proc MixAudio(dst: *[]Uint8; src: *[]Uint8; len: Uint32; volume: integer)
    proc MixAudioFormat(dst: *[]Uint8; src: *[]Uint8; format: AudioFormat; len: Uint32; volume: integer)
    proc QueueAudio(dev: AudioDeviceID; data: *void; len: Uint32): integer
    proc DequeueAudio(dev: AudioDeviceID; data: *void; len: Uint32): Uint32
    proc GetQueuedAudioSize(dev: AudioDeviceID): Uint32
    proc ClearQueuedAudio(dev: AudioDeviceID)
    proc LockAudio
    proc LockAudioDevice(dev: AudioDeviceID)
    proc UnlockAudio
    proc UnlockAudioDevice(dev: AudioDeviceID)
    proc CloseAudio
    proc CloseAudioDevice(dev: AudioDeviceID)

    // from blendmode.h
    type
        BlendMode = integer
    const
        BLENDMODE_ADD = 2
        BLENDMODE_BLEND = 1
        BLENDMODE_INVALID = 2147483647
        BLENDMODE_MOD = 4
        BLENDMODE_MUL = 8
        BLENDMODE_NONE = 0

    type
        BlendOperation = integer
    const
        BLENDOPERATION_ADD = 1
        BLENDOPERATION_MAXIMUM = 5
        BLENDOPERATION_MINIMUM = 4
        BLENDOPERATION_REV_SUBTRACT = 3
        BLENDOPERATION_SUBTRACT = 2

    type
        BlendFactor = integer
    const
        BLENDFACTOR_DST_ALPHA = 9
        BLENDFACTOR_DST_COLOR = 7
        BLENDFACTOR_ONE = 2
        BLENDFACTOR_ONE_MINUS_DST_ALPHA = 10
        BLENDFACTOR_ONE_MINUS_DST_COLOR = 8
        BLENDFACTOR_ONE_MINUS_SRC_ALPHA = 6
        BLENDFACTOR_ONE_MINUS_SRC_COLOR = 4
        BLENDFACTOR_SRC_ALPHA = 5
        BLENDFACTOR_SRC_COLOR = 3
        BLENDFACTOR_ZERO = 1

    proc ComposeCustomBlendMode(srcColorFactor: BlendFactor; dstColorFactor: BlendFactor; colorOperation: BlendOperation; srcAlphaFactor: BlendFactor; dstAlphaFactor: BlendFactor; alphaOperation: BlendOperation): BlendMode

    // from clipboard.h
    proc SetClipboardText(text: *[]char): integer
    proc GetClipboardText(): *[]char
    proc HasClipboardText(): bool

    // from config_minimal.h
    const
        HAVE_STDARG_H = 1
        HAVE_STDDEF_H = 1
        HAVE_STDINT_H = 1
        AUDIO_DRIVER_DUMMY = 1
        JOYSTICK_DISABLED = 1
        HAPTIC_DISABLED = 1
        SENSOR_DISABLED = 1
        LOADSO_DISABLED = 1
        THREADS_DISABLED = 1
        TIMERS_DISABLED = 1
        VIDEO_DRIVER_DUMMY = 1
        FILESYSTEM_DUMMY = 1


    // from cpuinfo.h
    const
        CACHELINE_SIZE = 128

    proc GetCPUCount(): integer
    proc GetCPUCacheLineSize(): integer
    proc HasRDTSC(): bool
    proc HasAltiVec(): bool
    proc HasMMX(): bool
    proc Has3DNow(): bool
    proc HasSSE(): bool
    proc HasSSE2(): bool
    proc HasSSE3(): bool
    proc HasSSE41(): bool
    proc HasSSE42(): bool
    proc HasAVX(): bool
    proc HasAVX2(): bool
    proc HasAVX512F(): bool
    proc HasARMSIMD(): bool
    proc HasNEON(): bool
    proc GetSystemRAM(): integer
    proc SIMDGetAlignment(): Uint64
    proc SIMDAlloc(len: size_t): *void
    proc SIMDRealloc(mem: *void; len: size_t): *void
    proc SIMDFree(ptr: *void)

    // from endian.h
    const
        LIL_ENDIAN = 1234
        BIG_ENDIAN = 4321
        BYTEORDER = 1234


    // from error.h
    type
        errorcode = (ENOMEM, EFREAD, EFWRITE, EFSEEK, UNSUPPORTED, LASTERROR)

    proc SetError(fmt: *[]char): integer [varargs]
    proc GetError(): *[]char
    proc GetErrorMsg(errstr: *[]char; maxlen: integer): *[]char
    proc ClearError
    proc Error(code: errorcode): integer

    // from events.h
    const
        RELEASED = 0
        PRESSED = 1
        TEXTEDITINGEVENT_TEXT_SIZE = 32
        TEXTINPUTEVENT_TEXT_SIZE = 32
        QUERY = -1
        IGNORE = 0
        DISABLE = 0
        ENABLE = 1

    type
        EventType = integer
    const
        APP_DIDENTERBACKGROUND = 260
        APP_DIDENTERFOREGROUND = 262
        APP_LOWMEMORY = 258
        APP_TERMINATING = 257
        APP_WILLENTERBACKGROUND = 259
        APP_WILLENTERFOREGROUND = 261
        AUDIODEVICEADDED = 4352
        AUDIODEVICEREMOVED = 4353
        CLIPBOARDUPDATE = 2304
        CONTROLLERAXISMOTION = 1616
        CONTROLLERBUTTONDOWN = 1617
        CONTROLLERBUTTONUP = 1618
        CONTROLLERDEVICEADDED = 1619
        CONTROLLERDEVICEREMAPPED = 1621
        CONTROLLERDEVICEREMOVED = 1620
        CONTROLLERSENSORUPDATE = 1625
        CONTROLLERTOUCHPADDOWN = 1622
        CONTROLLERTOUCHPADMOTION = 1623
        CONTROLLERTOUCHPADUP = 1624
        DISPLAYEVENT = 336
        DOLLARGESTURE = 2048
        DOLLARRECORD = 2049
        DROPBEGIN = 4098
        DROPCOMPLETE = 4099
        DROPFILE = 4096
        DROPTEXT = 4097
        FINGERDOWN = 1792
        FINGERMOTION = 1794
        FINGERUP = 1793
        FIRSTEVENT = 0
        JOYAXISMOTION = 1536
        JOYBALLMOTION = 1537
        JOYBUTTONDOWN = 1539
        JOYBUTTONUP = 1540
        JOYDEVICEADDED = 1541
        JOYDEVICEREMOVED = 1542
        JOYHATMOTION = 1538
        KEYDOWN = 768
        KEYMAPCHANGED = 772
        KEYUP = 769
        LASTEVENT = 65535
        LOCALECHANGED = 263
        MOUSEBUTTONDOWN = 1025
        MOUSEBUTTONUP = 1026
        MOUSEMOTION = 1024
        MOUSEWHEEL = 1027
        MULTIGESTURE = 2050
        QUIT = 256
        RENDER_DEVICE_RESET = 8193
        RENDER_TARGETS_RESET = 8192
        SENSORUPDATE = 4608
        SYSWMEVENT = 513
        TEXTEDITING = 770
        TEXTINPUT = 771
        USEREVENT = 32768
        WINDOWEVENT = 512

    type
        CommonEvent = cstruct
                        type_: Uint32
                        timestamp: Uint32 end
        DisplayEvent = cstruct
                        type_: Uint32
                        timestamp: Uint32
                        display: Uint32
                        event: Uint8
                        padding1: Uint8
                        padding2: Uint8
                        padding3: Uint8
                        data1: integer end
        WindowEvent = cstruct
                        type_: Uint32
                        timestamp: Uint32
                        windowID: Uint32
                        event: Uint8
                        padding1: Uint8
                        padding2: Uint8
                        padding3: Uint8
                        data1: integer
                        data2: integer end
        KeyboardEvent = cstruct
                        type_: Uint32
                        timestamp: Uint32
                        windowID: Uint32
                        state: Uint8
                        repeat_: Uint8
                        padding2: Uint8
                        padding3: Uint8
                        keysym: Keysym end
        TextEditingEvent = cstruct
                        type_: Uint32
                        timestamp: Uint32
                        windowID: Uint32
                        text: carray 32 of char
                        start: integer
                        length: integer end
        TextInputEvent = cstruct
                        type_: Uint32
                        timestamp: Uint32
                        windowID: Uint32
                        text: carray 32 of char end
        MouseMotionEvent = cstruct
                        type_: Uint32
                        timestamp: Uint32
                        windowID: Uint32
                        which: Uint32
                        state: Uint32
                        x: integer
                        y: integer
                        xrel: integer
                        yrel: integer end
        MouseButtonEvent = cstruct
                        type_: Uint32
                        timestamp: Uint32
                        windowID: Uint32
                        which: Uint32
                        button: Uint8
                        state: Uint8
                        clicks: Uint8
                        padding1: Uint8
                        x: integer
                        y: integer end
        MouseWheelEvent = cstruct
                        type_: Uint32
                        timestamp: Uint32
                        windowID: Uint32
                        which: Uint32
                        x: integer
                        y: integer
                        direction: Uint32 end
        JoyAxisEvent = cstruct
                        type_: Uint32
                        timestamp: Uint32
                        which: integer
                        axis: Uint8
                        padding1: Uint8
                        padding2: Uint8
                        padding3: Uint8
                        value: Sint16
                        padding4: Uint16 end
        JoyBallEvent = cstruct
                        type_: Uint32
                        timestamp: Uint32
                        which: integer
                        ball: Uint8
                        padding1: Uint8
                        padding2: Uint8
                        padding3: Uint8
                        xrel: Sint16
                        yrel: Sint16 end
        JoyHatEvent = cstruct
                        type_: Uint32
                        timestamp: Uint32
                        which: integer
                        hat: Uint8
                        value: Uint8
                        padding1: Uint8
                        padding2: Uint8 end
        JoyButtonEvent = cstruct
                        type_: Uint32
                        timestamp: Uint32
                        which: integer
                        button: Uint8
                        state: Uint8
                        padding1: Uint8
                        padding2: Uint8 end
        JoyDeviceEvent = cstruct
                        type_: Uint32
                        timestamp: Uint32
                        which: integer end
        ControllerAxisEvent = cstruct
                        type_: Uint32
                        timestamp: Uint32
                        which: integer
                        axis: Uint8
                        padding1: Uint8
                        padding2: Uint8
                        padding3: Uint8
                        value: Sint16
                        padding4: Uint16 end
        ControllerButtonEvent = cstruct
                        type_: Uint32
                        timestamp: Uint32
                        which: integer
                        button: Uint8
                        state: Uint8
                        padding1: Uint8
                        padding2: Uint8 end
        ControllerDeviceEvent = cstruct
                        type_: Uint32
                        timestamp: Uint32
                        which: integer end
        ControllerTouchpadEvent = cstruct
                        type_: Uint32
                        timestamp: Uint32
                        which: integer
                        touchpad: integer
                        finger: integer
                        x: real
                        y: real
                        pressure: real end
        ControllerSensorEvent = cstruct
                        type_: Uint32
                        timestamp: Uint32
                        which: integer
                        sensor: integer
                        data: carray 3 of real end
        AudioDeviceEvent = cstruct
                        type_: Uint32
                        timestamp: Uint32
                        which: Uint32
                        iscapture: Uint8
                        padding1: Uint8
                        padding2: Uint8
                        padding3: Uint8 end
        TouchFingerEvent = cstruct
                        type_: Uint32
                        timestamp: Uint32
                        touchId: GestureID
                        fingerId: GestureID
                        x: real
                        y: real
                        dx: real
                        dy: real
                        pressure: real
                        windowID: Uint32 end
        MultiGestureEvent = cstruct
                        type_: Uint32
                        timestamp: Uint32
                        touchId: GestureID
                        dTheta: real
                        dDist: real
                        x: real
                        y: real
                        numFingers: Uint16
                        padding: Uint16 end
        DollarGestureEvent = cstruct
                        type_: Uint32
                        timestamp: Uint32
                        touchId: GestureID
                        gestureId: GestureID
                        numFingers: Uint32
                        error: real
                        x: real
                        y: real end
        DropEvent = cstruct
                        type_: Uint32
                        timestamp: Uint32
                        file: *[]char
                        windowID: Uint32 end
        SensorEvent = cstruct
                        type_: Uint32
                        timestamp: Uint32
                        which: integer
                        data: carray 6 of real end
        QuitEvent = cstruct
                        type_: Uint32
                        timestamp: Uint32 end
        OSEvent = cstruct
                        type_: Uint32
                        timestamp: Uint32 end
        UserEvent = cstruct
                        type_: Uint32
                        timestamp: Uint32
                        windowID: Uint32
                        code: integer
                        data1: *void
                        data2: *void end
        SysWMmsg = cstruct end
        SysWMEvent = cstruct
                        type_: Uint32
                        timestamp: Uint32
                        msg: *SysWMmsg end
        Event = cunion
                        type_: Uint32
                        common: CommonEvent
                        display: DisplayEvent
                        window: WindowEvent
                        key: KeyboardEvent
                        edit: TextEditingEvent
                        text: TextInputEvent
                        motion: MouseMotionEvent
                        button: MouseButtonEvent
                        wheel: MouseWheelEvent
                        jaxis: JoyAxisEvent
                        jball: JoyBallEvent
                        jhat: JoyHatEvent
                        jbutton: JoyButtonEvent
                        jdevice: JoyDeviceEvent
                        caxis: ControllerAxisEvent
                        cbutton: ControllerButtonEvent
                        cdevice: ControllerDeviceEvent
                        ctouchpad: ControllerTouchpadEvent
                        csensor: ControllerSensorEvent
                        adevice: AudioDeviceEvent
                        sensor: SensorEvent
                        quit: QuitEvent
                        user: UserEvent
                        syswm: SysWMEvent
                        tfinger: TouchFingerEvent
                        mgesture: MultiGestureEvent
                        dgesture: DollarGestureEvent
                        drop: DropEvent
                        padding: carray 56 of Uint8 end
        eventaction = (ADDEVENT, PEEKEVENT, GETEVENT)
        EventFilter = proc(userdata: *void; event: *Event): integer

    proc PumpEvents
    proc PeepEvents(events: *Event; numevents: integer; action: eventaction; minType: Uint32; maxType: Uint32): integer
    proc HasEvent(type_: Uint32): bool
    proc HasEvents(minType: Uint32; maxType: Uint32): bool
    proc FlushEvent(type_: Uint32)
    proc FlushEvents(minType: Uint32; maxType: Uint32)
    proc PollEvent(event: *Event): integer
    proc WaitEvent(event: *Event): integer
    proc WaitEventTimeout(event: *Event; timeout: integer): integer
    proc PushEvent(event: *Event): integer
    proc SetEventFilter(filter: EventFilter; userdata: *void)
    proc GetEventFilter(filter: *[]proc(userdata: *void; event: *Event): integer; userdata: *[]*void): bool
    proc AddEventWatch(filter: EventFilter; userdata: *void)
    proc DelEventWatch(filter: EventFilter; userdata: *void)
    proc FilterEvents(filter: EventFilter; userdata: *void)
    proc EventState(type_: Uint32; state: integer): Uint8
    proc RegisterEvents(numevents: integer): Uint32

    // from filesystem.h
    proc GetBasePath(): *[]char
    proc GetPrefPath(org: *[]char; app: *[]char): *[]char

    // from gamecontroller.h
    type
        GameController = cstruct end
        GameControllerType = (CONTROLLER_TYPE_UNKNOWN, CONTROLLER_TYPE_XBOX360, CONTROLLER_TYPE_XBOXONE, CONTROLLER_TYPE_PS3, CONTROLLER_TYPE_PS4, CONTROLLER_TYPE_NINTENDO_SWITCH_PRO, CONTROLLER_TYPE_VIRTUAL, CONTROLLER_TYPE_PS5)
        GameControllerBindType = (CONTROLLER_BINDTYPE_NONE, CONTROLLER_BINDTYPE_BUTTON, CONTROLLER_BINDTYPE_AXIS, CONTROLLER_BINDTYPE_HAT)
        GameControllerButtonBind = cstruct
                        bindType: GameControllerBindType
                        value: cunion
                                    button: integer
                                    axis: integer
                                    hat: cstruct
                                                hat: integer
                                                hat_mask: integer end end end
        GameControllerAxis = integer
    const
        CONTROLLER_AXIS_INVALID = -1
        CONTROLLER_AXIS_LEFTX = 0
        CONTROLLER_AXIS_LEFTY = 1
        CONTROLLER_AXIS_MAX = 6
        CONTROLLER_AXIS_RIGHTX = 2
        CONTROLLER_AXIS_RIGHTY = 3
        CONTROLLER_AXIS_TRIGGERLEFT = 4
        CONTROLLER_AXIS_TRIGGERRIGHT = 5

    type
        GameControllerButton = integer
    const
        CONTROLLER_BUTTON_A = 0
        CONTROLLER_BUTTON_B = 1
        CONTROLLER_BUTTON_BACK = 4
        CONTROLLER_BUTTON_DPAD_DOWN = 12
        CONTROLLER_BUTTON_DPAD_LEFT = 13
        CONTROLLER_BUTTON_DPAD_RIGHT = 14
        CONTROLLER_BUTTON_DPAD_UP = 11
        CONTROLLER_BUTTON_GUIDE = 5
        CONTROLLER_BUTTON_INVALID = -1
        CONTROLLER_BUTTON_LEFTSHOULDER = 9
        CONTROLLER_BUTTON_LEFTSTICK = 7
        CONTROLLER_BUTTON_MAX = 21
        CONTROLLER_BUTTON_MISC1 = 15
        CONTROLLER_BUTTON_PADDLE1 = 16
        CONTROLLER_BUTTON_PADDLE2 = 17
        CONTROLLER_BUTTON_PADDLE3 = 18
        CONTROLLER_BUTTON_PADDLE4 = 19
        CONTROLLER_BUTTON_RIGHTSHOULDER = 10
        CONTROLLER_BUTTON_RIGHTSTICK = 8
        CONTROLLER_BUTTON_START = 6
        CONTROLLER_BUTTON_TOUCHPAD = 20
        CONTROLLER_BUTTON_X = 2
        CONTROLLER_BUTTON_Y = 3

    proc GameControllerAddMappingsFromRW(rw: *RWops; freerw: integer): integer
    proc GameControllerAddMapping(mappingString: *[]char): integer
    proc GameControllerNumMappings(): integer
    proc GameControllerMappingForIndex(mapping_index: integer): *[]char
    proc GameControllerMappingForGUID(guid: JoystickGUID): *[]char
    proc GameControllerMapping(gamecontroller: *GameController): *[]char
    proc IsGameController(joystick_index: integer): bool
    proc GameControllerNameForIndex(joystick_index: integer): *[]char
    proc GameControllerTypeForIndex(joystick_index: integer): GameControllerType
    proc GameControllerMappingForDeviceIndex(joystick_index: integer): *[]char
    proc GameControllerOpen(joystick_index: integer): *GameController
    proc GameControllerFromInstanceID(joyid: JoystickID): *GameController
    proc GameControllerFromPlayerIndex(player_index: integer): *GameController
    proc GameControllerName(gamecontroller: *GameController): *[]char
    proc GameControllerGetType(gamecontroller: *GameController): GameControllerType
    proc GameControllerGetPlayerIndex(gamecontroller: *GameController): integer
    proc GameControllerSetPlayerIndex(gamecontroller: *GameController; player_index: integer)
    proc GameControllerGetVendor(gamecontroller: *GameController): Uint16
    proc GameControllerGetProduct(gamecontroller: *GameController): Uint16
    proc GameControllerGetProductVersion(gamecontroller: *GameController): Uint16
    proc GameControllerGetSerial(gamecontroller: *GameController): *[]char
    proc GameControllerGetAttached(gamecontroller: *GameController): bool
    proc GameControllerGetJoystick(gamecontroller: *GameController): *Joystick
    proc GameControllerEventState(state: integer): integer
    proc GameControllerUpdate
    proc GameControllerGetAxisFromString(pchString: *[]char): GameControllerAxis
    proc GameControllerGetStringForAxis(axis: GameControllerAxis): *[]char
    proc GameControllerGetBindForAxis(gamecontroller: *GameController; axis: GameControllerAxis): GameControllerButtonBind
    proc GameControllerHasAxis(gamecontroller: *GameController; axis: GameControllerAxis): bool
    proc GameControllerGetAxis(gamecontroller: *GameController; axis: GameControllerAxis): Sint16
    proc GameControllerGetButtonFromString(pchString: *[]char): GameControllerButton
    proc GameControllerGetStringForButton(button: GameControllerButton): *[]char
    proc GameControllerGetBindForButton(gamecontroller: *GameController; button: GameControllerButton): GameControllerButtonBind
    proc GameControllerHasButton(gamecontroller: *GameController; button: GameControllerButton): bool
    proc GameControllerGetButton(gamecontroller: *GameController; button: GameControllerButton): Uint8
    proc GameControllerGetNumTouchpads(gamecontroller: *GameController): integer
    proc GameControllerGetNumTouchpadFingers(gamecontroller: *GameController; touchpad: integer): integer
    proc GameControllerGetTouchpadFinger(gamecontroller: *GameController; touchpad: integer; finger: integer; state: *[]Uint8; x: *[]real; y: *[]real; pressure: *[]real): integer
    proc GameControllerHasSensor(gamecontroller: *GameController; type_: SensorType): bool
    proc GameControllerSetSensorEnabled(gamecontroller: *GameController; type_: SensorType; enabled: bool): integer
    proc GameControllerIsSensorEnabled(gamecontroller: *GameController; type_: SensorType): bool
    proc GameControllerGetSensorData(gamecontroller: *GameController; type_: SensorType; data: *[]real; num_values: integer): integer
    proc GameControllerRumble(gamecontroller: *GameController; low_frequency_rumble: Uint16; high_frequency_rumble: Uint16; duration_ms: Uint32): integer
    proc GameControllerRumbleTriggers(gamecontroller: *GameController; left_rumble: Uint16; right_rumble: Uint16; duration_ms: Uint32): integer
    proc GameControllerHasLED(gamecontroller: *GameController): bool
    proc GameControllerSetLED(gamecontroller: *GameController; red: Uint8; green: Uint8; blue: Uint8): integer
    proc GameControllerClose(gamecontroller: *GameController)

    // from gesture.h
    type
        GestureID = ptrdiff_t

    proc RecordGesture(touchId: TouchID): integer
    proc SaveAllDollarTemplates(dst: *RWops): integer
    proc SaveDollarTemplate(gestureId: GestureID; dst: *RWops): integer
    proc LoadDollarTemplates(touchId: TouchID; src: *RWops): integer

    // from haptic.h
    const
        HAPTIC_CONSTANT = lsl(1, 0)
        HAPTIC_SINE = lsl(1, 1)
        HAPTIC_LEFTRIGHT = lsl(1, 2)
        HAPTIC_TRIANGLE = lsl(1, 3)
        HAPTIC_SAWTOOTHUP = lsl(1, 4)
        HAPTIC_SAWTOOTHDOWN = lsl(1, 5)
        HAPTIC_RAMP = lsl(1, 6)
        HAPTIC_SPRING = lsl(1, 7)
        HAPTIC_DAMPER = lsl(1, 8)
        HAPTIC_INERTIA = lsl(1, 9)
        HAPTIC_FRICTION = lsl(1, 10)
        HAPTIC_CUSTOM = lsl(1, 11)
        HAPTIC_GAIN = lsl(1, 12)
        HAPTIC_AUTOCENTER = lsl(1, 13)
        HAPTIC_STATUS = lsl(1, 14)
        HAPTIC_PAUSE = lsl(1, 15)
        HAPTIC_POLAR = 0
        HAPTIC_CARTESIAN = 1
        HAPTIC_SPHERICAL = 2
        HAPTIC_STEERING_AXIS = 3
        HAPTIC_INFINITY = 4294967295

    type
        Haptic = cstruct end
        HapticDirection = cstruct
                        type_: Uint8
                        dir: carray 3 of integer end
        HapticConstant = cstruct
                        type_: Uint16
                        direction: HapticDirection
                        length: Uint32
                        delay: Uint16
                        button: Uint16
                        interval: Uint16
                        level: Sint16
                        attack_length: Uint16
                        attack_level: Uint16
                        fade_length: Uint16
                        fade_level: Uint16 end
        HapticPeriodic = cstruct
                        type_: Uint16
                        direction: HapticDirection
                        length: Uint32
                        delay: Uint16
                        button: Uint16
                        interval: Uint16
                        period: Uint16
                        magnitude: Sint16
                        offset: Sint16
                        phase: Uint16
                        attack_length: Uint16
                        attack_level: Uint16
                        fade_length: Uint16
                        fade_level: Uint16 end
        HapticCondition = cstruct
                        type_: Uint16
                        direction: HapticDirection
                        length: Uint32
                        delay: Uint16
                        button: Uint16
                        interval: Uint16
                        right_sat: carray 3 of Uint16
                        left_sat: carray 3 of Uint16
                        right_coeff: carray 3 of Sint16
                        left_coeff: carray 3 of Sint16
                        deadband: carray 3 of Uint16
                        center: carray 3 of Sint16 end
        HapticRamp = cstruct
                        type_: Uint16
                        direction: HapticDirection
                        length: Uint32
                        delay: Uint16
                        button: Uint16
                        interval: Uint16
                        start: Sint16
                        end_: Sint16
                        attack_length: Uint16
                        attack_level: Uint16
                        fade_length: Uint16
                        fade_level: Uint16 end
        HapticLeftRight = cstruct
                        type_: Uint16
                        length: Uint32
                        large_magnitude: Uint16
                        small_magnitude: Uint16 end
        HapticCustom = cstruct
                        type_: Uint16
                        direction: HapticDirection
                        length: Uint32
                        delay: Uint16
                        button: Uint16
                        interval: Uint16
                        channels: Uint8
                        period: Uint16
                        samples: Uint16
                        data: *[]Uint16
                        attack_length: Uint16
                        attack_level: Uint16
                        fade_length: Uint16
                        fade_level: Uint16 end
        HapticEffect = cunion
                        type_: Uint16
                        constant: HapticConstant
                        periodic: HapticPeriodic
                        condition: HapticCondition
                        ramp: HapticRamp
                        leftright: HapticLeftRight
                        custom: HapticCustom end

    proc NumHaptics(): integer
    proc HapticName(device_index: integer): *[]char
    proc HapticOpen(device_index: integer): *Haptic
    proc HapticOpened(device_index: integer): integer
    proc HapticIndex(haptic: *Haptic): integer
    proc MouseIsHaptic(): integer
    proc HapticOpenFromMouse(): *Haptic
    proc JoystickIsHaptic(joystick: *Joystick): integer
    proc HapticOpenFromJoystick(joystick: *Joystick): *Haptic
    proc HapticClose(haptic: *Haptic)
    proc HapticNumEffects(haptic: *Haptic): integer
    proc HapticNumEffectsPlaying(haptic: *Haptic): integer
    proc HapticQuery(haptic: *Haptic): Uint32
    proc HapticNumAxes(haptic: *Haptic): integer
    proc HapticEffectSupported(haptic: *Haptic; effect: *HapticEffect): integer
    proc HapticNewEffect(haptic: *Haptic; effect: *HapticEffect): integer
    proc HapticUpdateEffect(haptic: *Haptic; effect: integer; data: *HapticEffect): integer
    proc HapticRunEffect(haptic: *Haptic; effect: integer; iterations: Uint32): integer
    proc HapticStopEffect(haptic: *Haptic; effect: integer): integer
    proc HapticDestroyEffect(haptic: *Haptic; effect: integer)
    proc HapticGetEffectStatus(haptic: *Haptic; effect: integer): integer
    proc HapticSetGain(haptic: *Haptic; gain: integer): integer
    proc HapticSetAutocenter(haptic: *Haptic; autocenter: integer): integer
    proc HapticPause(haptic: *Haptic): integer
    proc HapticUnpause(haptic: *Haptic): integer
    proc HapticStopAll(haptic: *Haptic): integer
    proc HapticRumbleSupported(haptic: *Haptic): integer
    proc HapticRumbleInit(haptic: *Haptic): integer
    proc HapticRumblePlay(haptic: *Haptic; strength: real; length: Uint32): integer
    proc HapticRumbleStop(haptic: *Haptic): integer

    // from hints.h
    const
        HINT_FRAMEBUFFER_ACCELERATION = nil // CHECK "FRAMEBUFFER_ACCELERATION"
        HINT_RENDER_DRIVER = nil // CHECK "RENDER_DRIVER"
        HINT_RENDER_OPENGL_SHADERS = nil // CHECK "RENDER_OPENGL_SHADERS"
        HINT_RENDER_DIRECT3D_THREADSAFE = nil // CHECK "RENDER_DIRECT3D_THREADSAFE"
        HINT_RENDER_DIRECT3D11_DEBUG = nil // CHECK "RENDER_DIRECT3D11_DEBUG"
        HINT_RENDER_LOGICAL_SIZE_MODE = nil // CHECK "RENDER_LOGICAL_SIZE_MODE"
        HINT_RENDER_SCALE_QUALITY = nil // CHECK "RENDER_SCALE_QUALITY"
        HINT_RENDER_VSYNC = nil // CHECK "RENDER_VSYNC"
        HINT_VIDEO_ALLOW_SCREENSAVER = nil // CHECK "VIDEO_ALLOW_SCREENSAVER"
        HINT_VIDEO_EXTERNAL_CONTEXT = nil // CHECK "VIDEO_EXTERNAL_CONTEXT"
        HINT_VIDEO_X11_XVIDMODE = nil // CHECK "VIDEO_X11_XVIDMODE"
        HINT_VIDEO_X11_XINERAMA = nil // CHECK "VIDEO_X11_XINERAMA"
        HINT_VIDEO_X11_XRANDR = nil // CHECK "VIDEO_X11_XRANDR"
        HINT_VIDEO_X11_WINDOW_VISUALID = nil // CHECK "VIDEO_X11_WINDOW_VISUALID"
        HINT_VIDEO_X11_NET_WM_PING = nil // CHECK "VIDEO_X11_NET_WM_PING"
        HINT_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR = nil // CHECK "VIDEO_X11_NET_WM_BYPASS_COMPOSITOR"
        HINT_VIDEO_X11_FORCE_EGL = nil // CHECK "VIDEO_X11_FORCE_EGL"
        HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN = nil // CHECK "WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN"
        HINT_WINDOWS_INTRESOURCE_ICON = nil // CHECK "WINDOWS_INTRESOURCE_ICON"
        HINT_WINDOWS_INTRESOURCE_ICON_SMALL = nil // CHECK "WINDOWS_INTRESOURCE_ICON_SMALL"
        HINT_WINDOWS_ENABLE_MESSAGELOOP = nil // CHECK "WINDOWS_ENABLE_MESSAGELOOP"
        HINT_GRAB_KEYBOARD = nil // CHECK "GRAB_KEYBOARD"
        HINT_MOUSE_DOUBLE_CLICK_TIME = nil // CHECK "MOUSE_DOUBLE_CLICK_TIME"
        HINT_MOUSE_DOUBLE_CLICK_RADIUS = nil // CHECK "MOUSE_DOUBLE_CLICK_RADIUS"
        HINT_MOUSE_NORMAL_SPEED_SCALE = nil // CHECK "MOUSE_NORMAL_SPEED_SCALE"
        HINT_MOUSE_RELATIVE_SPEED_SCALE = nil // CHECK "MOUSE_RELATIVE_SPEED_SCALE"
        HINT_MOUSE_RELATIVE_SCALING = nil // CHECK "MOUSE_RELATIVE_SCALING"
        HINT_MOUSE_RELATIVE_MODE_WARP = nil // CHECK "MOUSE_RELATIVE_MODE_WARP"
        HINT_MOUSE_FOCUS_CLICKTHROUGH = nil // CHECK "MOUSE_FOCUS_CLICKTHROUGH"
        HINT_TOUCH_MOUSE_EVENTS = nil // CHECK "TOUCH_MOUSE_EVENTS"
        HINT_MOUSE_TOUCH_EVENTS = nil // CHECK "MOUSE_TOUCH_EVENTS"
        HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS = nil // CHECK "VIDEO_MINIMIZE_ON_FOCUS_LOSS"
        HINT_IDLE_TIMER_DISABLED = nil // CHECK "IOS_IDLE_TIMER_DISABLED"
        HINT_ORIENTATIONS = nil // CHECK "IOS_ORIENTATIONS"
        HINT_APPLE_TV_CONTROLLER_UI_EVENTS = nil // CHECK "APPLE_TV_CONTROLLER_UI_EVENTS"
        HINT_APPLE_TV_REMOTE_ALLOW_ROTATION = nil // CHECK "APPLE_TV_REMOTE_ALLOW_ROTATION"
        HINT_IOS_HIDE_HOME_INDICATOR = nil // CHECK "IOS_HIDE_HOME_INDICATOR"
        HINT_ACCELEROMETER_AS_JOYSTICK = nil // CHECK "ACCELEROMETER_AS_JOYSTICK"
        HINT_TV_REMOTE_AS_JOYSTICK = nil // CHECK "TV_REMOTE_AS_JOYSTICK"
        HINT_XINPUT_ENABLED = nil // CHECK "XINPUT_ENABLED"
        HINT_XINPUT_USE_OLD_JOYSTICK_MAPPING = nil // CHECK "XINPUT_USE_OLD_JOYSTICK_MAPPING"
        HINT_GAMECONTROLLERTYPE = nil // CHECK "GAMECONTROLLERTYPE"
        HINT_GAMECONTROLLERCONFIG = nil // CHECK "GAMECONTROLLERCONFIG"
        HINT_GAMECONTROLLERCONFIG_FILE = nil // CHECK "GAMECONTROLLERCONFIG_FILE"
        HINT_GAMECONTROLLER_IGNORE_DEVICES = nil // CHECK "GAMECONTROLLER_IGNORE_DEVICES"
        HINT_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT = nil // CHECK "GAMECONTROLLER_IGNORE_DEVICES_EXCEPT"
        HINT_GAMECONTROLLER_USE_BUTTON_LABELS = nil // CHECK "GAMECONTROLLER_USE_BUTTON_LABELS"
        HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS = nil // CHECK "JOYSTICK_ALLOW_BACKGROUND_EVENTS"
        HINT_JOYSTICK_HIDAPI = nil // CHECK "JOYSTICK_HIDAPI"
        HINT_JOYSTICK_HIDAPI_PS4 = nil // CHECK "JOYSTICK_HIDAPI_PS4"
        HINT_JOYSTICK_HIDAPI_PS5 = nil // CHECK "JOYSTICK_HIDAPI_PS5"
        HINT_JOYSTICK_HIDAPI_PS4_RUMBLE = nil // CHECK "JOYSTICK_HIDAPI_PS4_RUMBLE"
        HINT_JOYSTICK_HIDAPI_STEAM = nil // CHECK "JOYSTICK_HIDAPI_STEAM"
        HINT_JOYSTICK_HIDAPI_SWITCH = nil // CHECK "JOYSTICK_HIDAPI_SWITCH"
        HINT_JOYSTICK_HIDAPI_XBOX = nil // CHECK "JOYSTICK_HIDAPI_XBOX"
        HINT_JOYSTICK_HIDAPI_CORRELATE_XINPUT = nil // CHECK "JOYSTICK_HIDAPI_CORRELATE_XINPUT"
        HINT_JOYSTICK_HIDAPI_GAMECUBE = nil // CHECK "JOYSTICK_HIDAPI_GAMECUBE"
        HINT_ENABLE_STEAM_CONTROLLERS = nil // CHECK "ENABLE_STEAM_CONTROLLERS"
        HINT_JOYSTICK_RAWINPUT = nil // CHECK "JOYSTICK_RAWINPUT"
        HINT_JOYSTICK_THREAD = nil // CHECK "JOYSTICK_THREAD"
        HINT_LINUX_JOYSTICK_DEADZONES = nil // CHECK "LINUX_JOYSTICK_DEADZONES"
        HINT_ALLOW_TOPMOST = nil // CHECK "ALLOW_TOPMOST"
        HINT_TIMER_RESOLUTION = nil // CHECK "TIMER_RESOLUTION"
        HINT_QTWAYLAND_CONTENT_ORIENTATION = nil // CHECK "QTWAYLAND_CONTENT_ORIENTATION"
        HINT_QTWAYLAND_WINDOW_FLAGS = nil // CHECK "QTWAYLAND_WINDOW_FLAGS"
        HINT_THREAD_STACK_SIZE = nil // CHECK "THREAD_STACK_SIZE"
        HINT_THREAD_PRIORITY_POLICY = nil // CHECK "THREAD_PRIORITY_POLICY"
        HINT_THREAD_FORCE_REALTIME_TIME_CRITICAL = nil // CHECK "THREAD_FORCE_REALTIME_TIME_CRITICAL"
        HINT_VIDEO_HIGHDPI_DISABLED = nil // CHECK "VIDEO_HIGHDPI_DISABLED"
        HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK = nil // CHECK "MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK"
        HINT_VIDEO_WIN_D3DCOMPILER = nil // CHECK "VIDEO_WIN_D3DCOMPILER"
        HINT_VIDEO_WINDOW_SHARE_PIXEL_FORMAT = nil // CHECK "VIDEO_WINDOW_SHARE_PIXEL_FORMAT"
        HINT_WINRT_PRIVACY_POLICY_URL = nil // CHECK "WINRT_PRIVACY_POLICY_URL"
        HINT_WINRT_PRIVACY_POLICY_LABEL = nil // CHECK "WINRT_PRIVACY_POLICY_LABEL"
        HINT_WINRT_HANDLE_BACK_BUTTON = nil // CHECK "WINRT_HANDLE_BACK_BUTTON"
        HINT_VIDEO_MAC_FULLSCREEN_SPACES = nil // CHECK "VIDEO_MAC_FULLSCREEN_SPACES"
        HINT_MAC_BACKGROUND_APP = nil // CHECK "MAC_BACKGROUND_APP"
        HINT_ANDROID_APK_EXPANSION_MAIN_FILE_VERSION = nil // CHECK "ANDROID_APK_EXPANSION_MAIN_FILE_VERSION"
        HINT_ANDROID_APK_EXPANSION_PATCH_FILE_VERSION = nil // CHECK "ANDROID_APK_EXPANSION_PATCH_FILE_VERSION"
        HINT_IME_INTERNAL_EDITING = nil // CHECK "IME_INTERNAL_EDITING"
        HINT_ANDROID_TRAP_BACK_BUTTON = nil // CHECK "ANDROID_TRAP_BACK_BUTTON"
        HINT_ANDROID_BLOCK_ON_PAUSE = nil // CHECK "ANDROID_BLOCK_ON_PAUSE"
        HINT_ANDROID_BLOCK_ON_PAUSE_PAUSEAUDIO = nil // CHECK "ANDROID_BLOCK_ON_PAUSE_PAUSEAUDIO"
        HINT_RETURN_KEY_HIDES_IME = nil // CHECK "RETURN_KEY_HIDES_IME"
        HINT_EMSCRIPTEN_KEYBOARD_ELEMENT = nil // CHECK "EMSCRIPTEN_KEYBOARD_ELEMENT"
        HINT_EMSCRIPTEN_ASYNCIFY = nil // CHECK "EMSCRIPTEN_ASYNCIFY"
        HINT_NO_SIGNAL_HANDLERS = nil // CHECK "NO_SIGNAL_HANDLERS"
        HINT_WINDOWS_NO_CLOSE_ON_ALT_F4 = nil // CHECK "WINDOWS_NO_CLOSE_ON_ALT_F4"
        HINT_BMP_SAVE_LEGACY_FORMAT = nil // CHECK "BMP_SAVE_LEGACY_FORMAT"
        HINT_WINDOWS_DISABLE_THREAD_NAMING = nil // CHECK "WINDOWS_DISABLE_THREAD_NAMING"
        HINT_RPI_VIDEO_LAYER = nil // CHECK "RPI_VIDEO_LAYER"
        HINT_VIDEO_DOUBLE_BUFFER = nil // CHECK "VIDEO_DOUBLE_BUFFER"
        HINT_OPENGL_ES_DRIVER = nil // CHECK "OPENGL_ES_DRIVER"
        HINT_AUDIO_RESAMPLING_MODE = nil // CHECK "AUDIO_RESAMPLING_MODE"
        HINT_AUDIO_CATEGORY = nil // CHECK "AUDIO_CATEGORY"
        HINT_RENDER_BATCHING = nil // CHECK "RENDER_BATCHING"
        HINT_AUTO_UPDATE_JOYSTICKS = nil // CHECK "AUTO_UPDATE_JOYSTICKS"
        HINT_AUTO_UPDATE_SENSORS = nil // CHECK "AUTO_UPDATE_SENSORS"
        HINT_EVENT_LOGGING = nil // CHECK "EVENT_LOGGING"
        HINT_WAVE_RIFF_CHUNK_SIZE = nil // CHECK "WAVE_RIFF_CHUNK_SIZE"
        HINT_WAVE_TRUNCATION = nil // CHECK "WAVE_TRUNCATION"
        HINT_WAVE_FACT_CHUNK = nil // CHECK "WAVE_FACT_CHUNK"
        HINT_DISPLAY_USABLE_BOUNDS = nil // CHECK "DISPLAY_USABLE_BOUNDS"
        HINT_AUDIO_DEVICE_APP_NAME = nil // CHECK "AUDIO_DEVICE_APP_NAME"
        HINT_AUDIO_DEVICE_STREAM_NAME = nil // CHECK "AUDIO_DEVICE_STREAM_NAME"
        HINT_PREFERRED_LOCALES = nil // CHECK "PREFERRED_LOCALES"

    type
        HintPriority = (HINT_DEFAULT, HINT_NORMAL, HINT_OVERRIDE)
        HintCallback = proc(userdata: *void; name: *[]char; oldValue: *[]char; newValue: *[]char)

    proc SetHintWithPriority(name: *[]char; value: *[]char; priority: HintPriority): bool
    proc SetHint(name: *[]char; value: *[]char): bool
    proc GetHint(name: *[]char): *[]char
    proc GetHintBoolean(name: *[]char; default_value: bool): bool
    proc AddHintCallback(name: *[]char; callback: HintCallback; userdata: *void)
    proc DelHintCallback(name: *[]char; callback: HintCallback; userdata: *void)
    proc ClearHints

    // from joystick.h
    const
        IPHONE_MAX_GFORCE = 5.0
        JOYSTICK_AXIS_MAX = 32767
        JOYSTICK_AXIS_MIN = -32768
        HAT_CENTERED = 00h
        HAT_UP = 01h
        HAT_RIGHT = 02h
        HAT_DOWN = 04h
        HAT_LEFT = 08h
        HAT_RIGHTUP = bitor(02h, 01h)
        HAT_RIGHTDOWN = bitor(02h, 04h)
        HAT_LEFTUP = bitor(08h, 01h)
        HAT_LEFTDOWN = bitor(08h, 04h)

    type
        Joystick = cstruct end
        JoystickGUID = cstruct
                        data: carray 16 of Uint8 end
        JoystickType = (JOYSTICK_TYPE_UNKNOWN, JOYSTICK_TYPE_GAMECONTROLLER, JOYSTICK_TYPE_WHEEL, JOYSTICK_TYPE_ARCADE_STICK, JOYSTICK_TYPE_FLIGHT_STICK, JOYSTICK_TYPE_DANCE_PAD, JOYSTICK_TYPE_GUITAR, JOYSTICK_TYPE_DRUM_KIT, JOYSTICK_TYPE_ARCADE_PAD, JOYSTICK_TYPE_THROTTLE)
        JoystickPowerLevel = integer
    const
        JOYSTICK_POWER_EMPTY = 0
        JOYSTICK_POWER_FULL = 3
        JOYSTICK_POWER_LOW = 1
        JOYSTICK_POWER_MAX = 5
        JOYSTICK_POWER_MEDIUM = 2
        JOYSTICK_POWER_UNKNOWN = -1
        JOYSTICK_POWER_WIRED = 4

    type
        JoystickID = int32_t

    proc LockJoysticks
    proc UnlockJoysticks
    proc NumJoysticks(): integer
    proc JoystickNameForIndex(device_index: integer): *[]char
    proc JoystickGetDevicePlayerIndex(device_index: integer): integer
    proc JoystickGetDeviceGUID(device_index: integer): JoystickGUID
    proc JoystickGetDeviceVendor(device_index: integer): Uint16
    proc JoystickGetDeviceProduct(device_index: integer): Uint16
    proc JoystickGetDeviceProductVersion(device_index: integer): Uint16
    proc JoystickGetDeviceType(device_index: integer): JoystickType
    proc JoystickGetDeviceInstanceID(device_index: integer): integer
    proc JoystickOpen(device_index: integer): *Joystick
    proc JoystickFromInstanceID(instance_id: JoystickID): *Joystick
    proc JoystickFromPlayerIndex(player_index: integer): *Joystick
    proc JoystickAttachVirtual(type_: JoystickType; naxes: integer; nbuttons: integer; nhats: integer): integer
    proc JoystickDetachVirtual(device_index: integer): integer
    proc JoystickIsVirtual(device_index: integer): bool
    proc JoystickSetVirtualAxis(joystick: *Joystick; axis: integer; value: Sint16): integer
    proc JoystickSetVirtualButton(joystick: *Joystick; button: integer; value: Uint8): integer
    proc JoystickSetVirtualHat(joystick: *Joystick; hat: integer; value: Uint8): integer
    proc JoystickName(joystick: *Joystick): *[]char
    proc JoystickGetPlayerIndex(joystick: *Joystick): integer
    proc JoystickSetPlayerIndex(joystick: *Joystick; player_index: integer)
    proc JoystickGetGUID(joystick: *Joystick): JoystickGUID
    proc JoystickGetVendor(joystick: *Joystick): Uint16
    proc JoystickGetProduct(joystick: *Joystick): Uint16
    proc JoystickGetProductVersion(joystick: *Joystick): Uint16
    proc JoystickGetSerial(joystick: *Joystick): *[]char
    proc JoystickGetType(joystick: *Joystick): JoystickType
    proc JoystickGetGUIDString(guid: JoystickGUID; pszGUID: *[]char; cbGUID: integer)
    proc JoystickGetGUIDFromString(pchGUID: *[]char): JoystickGUID
    proc JoystickGetAttached(joystick: *Joystick): bool
    proc JoystickInstanceID(joystick: *Joystick): integer
    proc JoystickNumAxes(joystick: *Joystick): integer
    proc JoystickNumBalls(joystick: *Joystick): integer
    proc JoystickNumHats(joystick: *Joystick): integer
    proc JoystickNumButtons(joystick: *Joystick): integer
    proc JoystickUpdate
    proc JoystickEventState(state: integer): integer
    proc JoystickGetAxis(joystick: *Joystick; axis: integer): Sint16
    proc JoystickGetAxisInitialState(joystick: *Joystick; axis: integer; state: *[]Sint16): bool
    proc JoystickGetHat(joystick: *Joystick; hat: integer): Uint8
    proc JoystickGetBall(joystick: *Joystick; ball: integer; dx: *[]integer; dy: *[]integer): integer
    proc JoystickGetButton(joystick: *Joystick; button: integer): Uint8
    proc JoystickRumble(joystick: *Joystick; low_frequency_rumble: Uint16; high_frequency_rumble: Uint16; duration_ms: Uint32): integer
    proc JoystickRumbleTriggers(joystick: *Joystick; left_rumble: Uint16; right_rumble: Uint16; duration_ms: Uint32): integer
    proc JoystickHasLED(joystick: *Joystick): bool
    proc JoystickSetLED(joystick: *Joystick; red: Uint8; green: Uint8; blue: Uint8): integer
    proc JoystickClose(joystick: *Joystick)
    proc JoystickCurrentPowerLevel(joystick: *Joystick): JoystickPowerLevel

    // from keyboard.h
    type
        Keysym = cstruct
                        scancode: Scancode
                        sym: integer
                        mod_: Uint16
                        unused: Uint32 end

    proc GetKeyboardFocus(): *Window
    proc GetKeyboardState(numkeys: *[]integer): *[]Uint8
    proc GetModState(): Keymod
    proc SetModState(modstate: Keymod)
    proc GetKeyFromScancode(scancode: Scancode): integer
    proc GetScancodeFromKey(key: Keycode): Scancode
    proc GetScancodeName(scancode: Scancode): *[]char
    proc GetScancodeFromName(name: *[]char): Scancode
    proc GetKeyName(key: Keycode): *[]char
    proc GetKeyFromName(name: *[]char): integer
    proc StartTextInput
    proc IsTextInputActive(): bool
    proc StopTextInput
    proc SetTextInputRect(rect: *Rect)
    proc HasScreenKeyboardSupport(): bool
    proc IsScreenKeyboardShown(window: *Window): bool

    // from keycode.h
    const
        SDLK_SCANCODE_MASK = lsl(1, 30)

    type
        KeyCode = integer
    const
        SDLK_0 = 48
        SDLK_1 = 49
        SDLK_2 = 50
        SDLK_3 = 51
        SDLK_4 = 52
        SDLK_5 = 53
        SDLK_6 = 54
        SDLK_7 = 55
        SDLK_8 = 56
        SDLK_9 = 57
        SDLK_AC_BACK = 1073742094
        SDLK_AC_BOOKMARKS = 1073742098
        SDLK_AC_FORWARD = 1073742095
        SDLK_AC_HOME = 1073742093
        SDLK_AC_REFRESH = 1073742097
        SDLK_AC_SEARCH = 1073742092
        SDLK_AC_STOP = 1073742096
        SDLK_AGAIN = 1073741945
        SDLK_ALTERASE = 1073741977
        SDLK_AMPERSAND = 38
        SDLK_APP1 = 1073742107
        SDLK_APP2 = 1073742108
        SDLK_APPLICATION = 1073741925
        SDLK_ASTERISK = 42
        SDLK_AT = 64
        SDLK_AUDIOFASTFORWARD = 1073742110
        SDLK_AUDIOMUTE = 1073742086
        SDLK_AUDIONEXT = 1073742082
        SDLK_AUDIOPLAY = 1073742085
        SDLK_AUDIOPREV = 1073742083
        SDLK_AUDIOREWIND = 1073742109
        SDLK_AUDIOSTOP = 1073742084
        SDLK_BACKQUOTE = 96
        SDLK_BACKSLASH = 92
        SDLK_BACKSPACE = 8
        SDLK_BRIGHTNESSDOWN = 1073742099
        SDLK_BRIGHTNESSUP = 1073742100
        SDLK_CALCULATOR = 1073742090
        SDLK_CANCEL = 1073741979
        SDLK_CAPSLOCK = 1073741881
        SDLK_CARET = 94
        SDLK_CLEAR = 1073741980
        SDLK_CLEARAGAIN = 1073741986
        SDLK_COLON = 58
        SDLK_COMMA = 44
        SDLK_COMPUTER = 1073742091
        SDLK_COPY = 1073741948
        SDLK_CRSEL = 1073741987
        SDLK_CURRENCYSUBUNIT = 1073742005
        SDLK_CURRENCYUNIT = 1073742004
        SDLK_CUT = 1073741947
        SDLK_DECIMALSEPARATOR = 1073742003
        SDLK_DELETE = 127
        SDLK_DISPLAYSWITCH = 1073742101
        SDLK_DOLLAR = 36
        SDLK_DOWN = 1073741905
        SDLK_EJECT = 1073742105
        SDLK_END = 1073741901
        SDLK_EQUALS = 61
        SDLK_ESCAPE = 27
        SDLK_EXCLAIM = 33
        SDLK_EXECUTE = 1073741940
        SDLK_EXSEL = 1073741988
        SDLK_F1 = 1073741882
        SDLK_F10 = 1073741891
        SDLK_F11 = 1073741892
        SDLK_F12 = 1073741893
        SDLK_F13 = 1073741928
        SDLK_F14 = 1073741929
        SDLK_F15 = 1073741930
        SDLK_F16 = 1073741931
        SDLK_F17 = 1073741932
        SDLK_F18 = 1073741933
        SDLK_F19 = 1073741934
        SDLK_F2 = 1073741883
        SDLK_F20 = 1073741935
        SDLK_F21 = 1073741936
        SDLK_F22 = 1073741937
        SDLK_F23 = 1073741938
        SDLK_F24 = 1073741939
        SDLK_F3 = 1073741884
        SDLK_F4 = 1073741885
        SDLK_F5 = 1073741886
        SDLK_F6 = 1073741887
        SDLK_F7 = 1073741888
        SDLK_F8 = 1073741889
        SDLK_F9 = 1073741890
        SDLK_FIND = 1073741950
        SDLK_GREATER = 62
        SDLK_HASH = 35
        SDLK_HELP = 1073741941
        SDLK_HOME = 1073741898
        SDLK_INSERT = 1073741897
        SDLK_KBDILLUMDOWN = 1073742103
        SDLK_KBDILLUMTOGGLE = 1073742102
        SDLK_KBDILLUMUP = 1073742104
        SDLK_KP_0 = 1073741922
        SDLK_KP_00 = 1073742000
        SDLK_KP_000 = 1073742001
        SDLK_KP_1 = 1073741913
        SDLK_KP_2 = 1073741914
        SDLK_KP_3 = 1073741915
        SDLK_KP_4 = 1073741916
        SDLK_KP_5 = 1073741917
        SDLK_KP_6 = 1073741918
        SDLK_KP_7 = 1073741919
        SDLK_KP_8 = 1073741920
        SDLK_KP_9 = 1073741921
        SDLK_KP_A = 1073742012
        SDLK_KP_AMPERSAND = 1073742023
        SDLK_KP_AT = 1073742030
        SDLK_KP_B = 1073742013
        SDLK_KP_BACKSPACE = 1073742011
        SDLK_KP_BINARY = 1073742042
        SDLK_KP_C = 1073742014
        SDLK_KP_CLEAR = 1073742040
        SDLK_KP_CLEARENTRY = 1073742041
        SDLK_KP_COLON = 1073742027
        SDLK_KP_COMMA = 1073741957
        SDLK_KP_D = 1073742015
        SDLK_KP_DBLAMPERSAND = 1073742024
        SDLK_KP_DBLVERTICALBAR = 1073742026
        SDLK_KP_DECIMAL = 1073742044
        SDLK_KP_DIVIDE = 1073741908
        SDLK_KP_E = 1073742016
        SDLK_KP_ENTER = 1073741912
        SDLK_KP_EQUALS = 1073741927
        SDLK_KP_EQUALSAS400 = 1073741958
        SDLK_KP_EXCLAM = 1073742031
        SDLK_KP_F = 1073742017
        SDLK_KP_GREATER = 1073742022
        SDLK_KP_HASH = 1073742028
        SDLK_KP_HEXADECIMAL = 1073742045
        SDLK_KP_LEFTBRACE = 1073742008
        SDLK_KP_LEFTPAREN = 1073742006
        SDLK_KP_LESS = 1073742021
        SDLK_KP_MEMADD = 1073742035
        SDLK_KP_MEMCLEAR = 1073742034
        SDLK_KP_MEMDIVIDE = 1073742038
        SDLK_KP_MEMMULTIPLY = 1073742037
        SDLK_KP_MEMRECALL = 1073742033
        SDLK_KP_MEMSTORE = 1073742032
        SDLK_KP_MEMSUBTRACT = 1073742036
        SDLK_KP_MINUS = 1073741910
        SDLK_KP_MULTIPLY = 1073741909
        SDLK_KP_OCTAL = 1073742043
        SDLK_KP_PERCENT = 1073742020
        SDLK_KP_PERIOD = 1073741923
        SDLK_KP_PLUS = 1073741911
        SDLK_KP_PLUSMINUS = 1073742039
        SDLK_KP_POWER = 1073742019
        SDLK_KP_RIGHTBRACE = 1073742009
        SDLK_KP_RIGHTPAREN = 1073742007
        SDLK_KP_SPACE = 1073742029
        SDLK_KP_TAB = 1073742010
        SDLK_KP_VERTICALBAR = 1073742025
        SDLK_KP_XOR = 1073742018
        SDLK_LALT = 1073742050
        SDLK_LCTRL = 1073742048
        SDLK_LEFT = 1073741904
        SDLK_LEFTBRACKET = 91
        SDLK_LEFTPAREN = 40
        SDLK_LESS = 60
        SDLK_LGUI = 1073742051
        SDLK_LSHIFT = 1073742049
        SDLK_MAIL = 1073742089
        SDLK_MEDIASELECT = 1073742087
        SDLK_MENU = 1073741942
        SDLK_MINUS = 45
        SDLK_MODE = 1073742081
        SDLK_MUTE = 1073741951
        SDLK_NUMLOCKCLEAR = 1073741907
        SDLK_OPER = 1073741985
        SDLK_OUT = 1073741984
        SDLK_PAGEDOWN = 1073741902
        SDLK_PAGEUP = 1073741899
        SDLK_PASTE = 1073741949
        SDLK_PAUSE = 1073741896
        SDLK_PERCENT = 37
        SDLK_PERIOD = 46
        SDLK_PLUS = 43
        SDLK_POWER = 1073741926
        SDLK_PRINTSCREEN = 1073741894
        SDLK_PRIOR = 1073741981
        SDLK_QUESTION = 63
        SDLK_QUOTE = 39
        SDLK_QUOTEDBL = 34
        SDLK_RALT = 1073742054
        SDLK_RCTRL = 1073742052
        SDLK_RETURN = 13
        SDLK_RETURN2 = 1073741982
        SDLK_RGUI = 1073742055
        SDLK_RIGHT = 1073741903
        SDLK_RIGHTBRACKET = 93
        SDLK_RIGHTPAREN = 41
        SDLK_RSHIFT = 1073742053
        SDLK_SCROLLLOCK = 1073741895
        SDLK_SELECT = 1073741943
        SDLK_SEMICOLON = 59
        SDLK_SEPARATOR = 1073741983
        SDLK_SLASH = 47
        SDLK_SLEEP = 1073742106
        SDLK_SPACE = 32
        SDLK_STOP = 1073741944
        SDLK_SYSREQ = 1073741978
        SDLK_TAB = 9
        SDLK_THOUSANDSSEPARATOR = 1073742002
        SDLK_UNDERSCORE = 95
        SDLK_UNDO = 1073741946
        SDLK_UNKNOWN = 0
        SDLK_UP = 1073741906
        SDLK_VOLUMEDOWN = 1073741953
        SDLK_VOLUMEUP = 1073741952
        SDLK_WWW = 1073742088
        SDLK_a = 97
        SDLK_b = 98
        SDLK_c = 99
        SDLK_d = 100
        SDLK_e = 101
        SDLK_f = 102
        SDLK_g = 103
        SDLK_h = 104
        SDLK_i = 105
        SDLK_j = 106
        SDLK_k = 107
        SDLK_l = 108
        SDLK_m = 109
        SDLK_n = 110
        SDLK_o = 111
        SDLK_p = 112
        SDLK_q = 113
        SDLK_r = 114
        SDLK_s = 115
        SDLK_t = 116
        SDLK_u = 117
        SDLK_v = 118
        SDLK_w = 119
        SDLK_x = 120
        SDLK_y = 121
        SDLK_z = 122

    type
        Keymod = integer
    const
        KMOD_ALT = 768
        KMOD_CAPS = 8192
        KMOD_CTRL = 192
        KMOD_GUI = 3072
        KMOD_LALT = 256
        KMOD_LCTRL = 64
        KMOD_LGUI = 1024
        KMOD_LSHIFT = 1
        KMOD_MODE = 16384
        KMOD_NONE = 0
        KMOD_NUM = 4096
        KMOD_RALT = 512
        KMOD_RCTRL = 128
        KMOD_RESERVED = 32768
        KMOD_RGUI = 2048
        KMOD_RSHIFT = 2
        KMOD_SHIFT = 3

    type
        Keycode = int32_t


    // from loadso.h
    proc LoadObject(sofile: *[]char): *void
    proc LoadFunction(handle: *void; name: *[]char): *void
    proc UnloadObject(handle: *void)

    // from locale.h
    type
        Locale = cstruct
                        language: *[]char
                        country: *[]char end

    proc GetPreferredLocales(): *Locale

    // from log.h
    const
        MAX_LOG_MESSAGE = 4096

    type
        LogCategory = (LOG_CATEGORY_APPLICATION, LOG_CATEGORY_ERROR, LOG_CATEGORY_ASSERT, LOG_CATEGORY_SYSTEM, LOG_CATEGORY_AUDIO, LOG_CATEGORY_VIDEO, LOG_CATEGORY_RENDER, LOG_CATEGORY_INPUT, LOG_CATEGORY_TEST, LOG_CATEGORY_RESERVED1, LOG_CATEGORY_RESERVED2, LOG_CATEGORY_RESERVED3, LOG_CATEGORY_RESERVED4, LOG_CATEGORY_RESERVED5, LOG_CATEGORY_RESERVED6, LOG_CATEGORY_RESERVED7, LOG_CATEGORY_RESERVED8, LOG_CATEGORY_RESERVED9, LOG_CATEGORY_RESERVED10, LOG_CATEGORY_CUSTOM)
        LogPriority = integer
    const
        LOG_PRIORITY_CRITICAL = 6
        LOG_PRIORITY_DEBUG = 2
        LOG_PRIORITY_ERROR = 5
        LOG_PRIORITY_INFO = 3
        LOG_PRIORITY_VERBOSE = 1
        LOG_PRIORITY_WARN = 4
        NUM_LOG_PRIORITIES = 7

    type
        LogOutputFunction = proc(userdata: *void; category: integer; priority: LogPriority; message: *[]char)

    proc LogSetAllPriority(priority: LogPriority)
    proc LogSetPriority(category: integer; priority: LogPriority)
    proc LogGetPriority(category: integer): LogPriority
    proc LogResetPriorities
    proc Log(fmt: *[]char) [varargs]
    proc LogVerbose(category: integer; fmt: *[]char) [varargs]
    proc LogDebug(category: integer; fmt: *[]char) [varargs]
    proc LogInfo(category: integer; fmt: *[]char) [varargs]
    proc LogWarn(category: integer; fmt: *[]char) [varargs]
    proc LogError(category: integer; fmt: *[]char) [varargs]
    proc LogCritical(category: integer; fmt: *[]char) [varargs]
    proc LogMessage(category: integer; priority: LogPriority; fmt: *[]char) [varargs]
    proc LogMessageV(category: integer; priority: LogPriority; fmt: *[]char; _4: *__va_elem)
    proc LogGetOutputFunction(callback: *[]proc(userdata: *void; category: integer; priority: LogPriority; message: *[]char); userdata: *[]*void)
    proc LogSetOutputFunction(callback: LogOutputFunction; userdata: *void)

    // from main.h
    type
        main_func = proc(argc: integer; _2: *[]*[]char): integer

    proc main(argc: integer; _2: *[]*[]char): integer
    proc SetMainReady

    // from messagebox.h
    type
        MessageBoxFlags = integer
    const
        MESSAGEBOX_BUTTONS_LEFT_TO_RIGHT = 128
        MESSAGEBOX_BUTTONS_RIGHT_TO_LEFT = 256
        MESSAGEBOX_ERROR = 16
        MESSAGEBOX_INFORMATION = 64
        MESSAGEBOX_WARNING = 32

    type
        MessageBoxButtonFlags = integer
    const
        MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT = 2
        MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT = 1

    type
        MessageBoxButtonData = cstruct
                        flags: Uint32
                        buttonid: integer
                        text: *[]char end
        MessageBoxColor = cstruct
                        r: Uint8
                        g: Uint8
                        b: Uint8 end
        MessageBoxColorType = (MESSAGEBOX_COLOR_BACKGROUND, MESSAGEBOX_COLOR_TEXT, MESSAGEBOX_COLOR_BUTTON_BORDER, MESSAGEBOX_COLOR_BUTTON_BACKGROUND, MESSAGEBOX_COLOR_BUTTON_SELECTED, MESSAGEBOX_COLOR_MAX)
        MessageBoxColorScheme = cstruct
                        colors: carray 5 of MessageBoxColor end
        MessageBoxData = cstruct
                        flags: Uint32
                        window: *Window
                        title: *[]char
                        message: *[]char
                        numbuttons: integer
                        buttons: *MessageBoxButtonData
                        colorScheme: *MessageBoxColorScheme end

    proc ShowMessageBox(messageboxdata: *MessageBoxData; buttonid: *[]integer): integer
    proc ShowSimpleMessageBox(flags: Uint32; title: *[]char; message: *[]char; window: *Window): integer

    // from metal.h
    type
        MetalView = *void

    proc Metal_CreateView(window: *Window): MetalView
    proc Metal_DestroyView(view: MetalView)
    proc Metal_GetLayer(view: MetalView): *void
    proc Metal_GetDrawableSize(window: *Window; w: *[]integer; h: *[]integer)

    // from misc.h
    proc OpenURL(url: *[]char): integer

    // from mouse.h
    const
        BUTTON_LEFT = 1
        BUTTON_MIDDLE = 2
        BUTTON_RIGHT = 3
        BUTTON_X1 = 4
        BUTTON_X2 = 5
        BUTTON_LMASK = lsl(1, 1 - 1)
        BUTTON_MMASK = lsl(1, 2 - 1)
        BUTTON_RMASK = lsl(1, 3 - 1)
        BUTTON_X1MASK = lsl(1, 4 - 1)
        BUTTON_X2MASK = lsl(1, 5 - 1)

    type
        Cursor = cstruct end
        SystemCursor = (SYSTEM_CURSOR_ARROW, SYSTEM_CURSOR_IBEAM, SYSTEM_CURSOR_WAIT, SYSTEM_CURSOR_CROSSHAIR, SYSTEM_CURSOR_WAITARROW, SYSTEM_CURSOR_SIZENWSE, SYSTEM_CURSOR_SIZENESW, SYSTEM_CURSOR_SIZEWE, SYSTEM_CURSOR_SIZENS, SYSTEM_CURSOR_SIZEALL, SYSTEM_CURSOR_NO, SYSTEM_CURSOR_HAND, NUM_SYSTEM_CURSORS)
        MouseWheelDirection = (MOUSEWHEEL_NORMAL, MOUSEWHEEL_FLIPPED)

    proc GetMouseFocus(): *Window
    proc GetMouseState(x: *[]integer; y: *[]integer): Uint32
    proc GetGlobalMouseState(x: *[]integer; y: *[]integer): Uint32
    proc GetRelativeMouseState(x: *[]integer; y: *[]integer): Uint32
    proc WarpMouseInWindow(window: *Window; x: integer; y: integer)
    proc WarpMouseGlobal(x: integer; y: integer): integer
    proc SetRelativeMouseMode(enabled: bool): integer
    proc CaptureMouse(enabled: bool): integer
    proc GetRelativeMouseMode(): bool
    proc CreateCursor(data: *[]Uint8; mask: *[]Uint8; w: integer; h: integer; hot_x: integer; hot_y: integer): *Cursor
    proc CreateColorCursor(surface: *Surface; hot_x: integer; hot_y: integer): *Cursor
    proc CreateSystemCursor(id: SystemCursor): *Cursor
    proc SetCursor(cursor: *Cursor)
    proc GetCursor(): *Cursor
    proc GetDefaultCursor(): *Cursor
    proc FreeCursor(cursor: *Cursor)
    proc ShowCursor(toggle: integer): integer

    // from mutex.h
    const
        MUTEX_TIMEDOUT = 1
        MUTEX_MAXWAIT = bitnot(0)

    type
        mutex = cstruct end
        sem = cstruct end
        cond = cstruct end

    proc CreateMutex(): *mutex
    proc LockMutex(mutex: *mutex): integer
    proc TryLockMutex(mutex: *mutex): integer
    proc UnlockMutex(mutex: *mutex): integer
    proc DestroyMutex(mutex: *mutex)
    proc CreateSemaphore(initial_value: Uint32): *sem
    proc DestroySemaphore(sem: *sem)
    proc SemWait(sem: *sem): integer
    proc SemTryWait(sem: *sem): integer
    proc SemWaitTimeout(sem: *sem; ms: Uint32): integer
    proc SemPost(sem: *sem): integer
    proc SemValue(sem: *sem): Uint32
    proc CreateCond(): *cond
    proc DestroyCond(cond: *cond)
    proc CondSignal(cond: *cond): integer
    proc CondBroadcast(cond: *cond): integer
    proc CondWait(cond: *cond; mutex: *mutex): integer
    proc CondWaitTimeout(cond: *cond; mutex: *mutex; ms: Uint32): integer

    // from pixels.h
    const
        ALPHA_OPAQUE = 255
        ALPHA_TRANSPARENT = 0
        Colour = nil // CHECK Color

    type
        PixelType = (PIXELTYPE_UNKNOWN, PIXELTYPE_INDEX1, PIXELTYPE_INDEX4, PIXELTYPE_INDEX8, PIXELTYPE_PACKED8, PIXELTYPE_PACKED16, PIXELTYPE_PACKED32, PIXELTYPE_ARRAYU8, PIXELTYPE_ARRAYU16, PIXELTYPE_ARRAYU32, PIXELTYPE_ARRAYF16, PIXELTYPE_ARRAYF32)
        BitmapOrder = (BITMAPORDER_NONE, BITMAPORDER_4321, BITMAPORDER_1234)
        PackedOrder = (PACKEDORDER_NONE, PACKEDORDER_XRGB, PACKEDORDER_RGBX, PACKEDORDER_ARGB, PACKEDORDER_RGBA, PACKEDORDER_XBGR, PACKEDORDER_BGRX, PACKEDORDER_ABGR, PACKEDORDER_BGRA)
        ArrayOrder = (ARRAYORDER_NONE, ARRAYORDER_RGB, ARRAYORDER_RGBA, ARRAYORDER_ARGB, ARRAYORDER_BGR, ARRAYORDER_BGRA, ARRAYORDER_ABGR)
        PackedLayout = (PACKEDLAYOUT_NONE, PACKEDLAYOUT_332, PACKEDLAYOUT_4444, PACKEDLAYOUT_1555, PACKEDLAYOUT_5551, PACKEDLAYOUT_565, PACKEDLAYOUT_8888, PACKEDLAYOUT_2101010, PACKEDLAYOUT_1010102)
        PixelFormatEnum = integer
    const
        PIXELFORMAT_ABGR1555 = 359862274
        PIXELFORMAT_ABGR32 = 373694468
        PIXELFORMAT_ABGR4444 = 359796738
        PIXELFORMAT_ABGR8888 = 376840196
        PIXELFORMAT_ARGB1555 = 355667970
        PIXELFORMAT_ARGB2101010 = 372711428
        PIXELFORMAT_ARGB32 = 377888772
        PIXELFORMAT_ARGB4444 = 355602434
        PIXELFORMAT_ARGB8888 = 372645892
        PIXELFORMAT_BGR24 = 390076419
        PIXELFORMAT_BGR444 = 357698562
        PIXELFORMAT_BGR555 = 357764866
        PIXELFORMAT_BGR565 = 357896194
        PIXELFORMAT_BGR888 = 374740996
        PIXELFORMAT_BGRA32 = 372645892
        PIXELFORMAT_BGRA4444 = 360845314
        PIXELFORMAT_BGRA5551 = 360976386
        PIXELFORMAT_BGRA8888 = 377888772
        PIXELFORMAT_BGRX8888 = 375789572
        PIXELFORMAT_EXTERNAL_OES = 542328143
        PIXELFORMAT_INDEX1LSB = 286261504
        PIXELFORMAT_INDEX1MSB = 287310080
        PIXELFORMAT_INDEX4LSB = 303039488
        PIXELFORMAT_INDEX4MSB = 304088064
        PIXELFORMAT_INDEX8 = 318769153
        PIXELFORMAT_IYUV = 1448433993
        PIXELFORMAT_NV12 = 842094158
        PIXELFORMAT_NV21 = 825382478
        PIXELFORMAT_RGB24 = 386930691
        PIXELFORMAT_RGB332 = 336660481
        PIXELFORMAT_RGB444 = 353504258
        PIXELFORMAT_RGB555 = 353570562
        PIXELFORMAT_RGB565 = 353701890
        PIXELFORMAT_RGB888 = 370546692
        PIXELFORMAT_RGBA32 = 376840196
        PIXELFORMAT_RGBA4444 = 356651010
        PIXELFORMAT_RGBA5551 = 356782082
        PIXELFORMAT_RGBA8888 = 373694468
        PIXELFORMAT_RGBX8888 = 371595268
        PIXELFORMAT_UNKNOWN = 0
        PIXELFORMAT_UYVY = 1498831189
        PIXELFORMAT_XBGR1555 = 357764866
        PIXELFORMAT_XBGR4444 = 357698562
        PIXELFORMAT_XBGR8888 = 374740996
        PIXELFORMAT_XRGB1555 = 353570562
        PIXELFORMAT_XRGB4444 = 353504258
        PIXELFORMAT_XRGB8888 = 370546692
        PIXELFORMAT_YUY2 = 844715353
        PIXELFORMAT_YV12 = 842094169
        PIXELFORMAT_YVYU = 1431918169

    type
        Color = cstruct
                        r: Uint8
                        g: Uint8
                        b: Uint8
                        a: Uint8 end
        Palette = cstruct
                        ncolors: integer
                        colors: *Color
                        version: Uint32
                        refcount: integer end
        PixelFormat = cstruct
                        format: Uint32
                        palette: *Palette
                        BitsPerPixel: Uint8
                        BytesPerPixel: Uint8
                        padding: carray 2 of Uint8
                        Rmask: Uint32
                        Gmask: Uint32
                        Bmask: Uint32
                        Amask: Uint32
                        Rloss: Uint8
                        Gloss: Uint8
                        Bloss: Uint8
                        Aloss: Uint8
                        Rshift: Uint8
                        Gshift: Uint8
                        Bshift: Uint8
                        Ashift: Uint8
                        refcount: integer
                        next: *PixelFormat end

    proc GetPixelFormatName(format: Uint32): *[]char
    proc PixelFormatEnumToMasks(format: Uint32; bpp: *[]integer; Rmask: *[]Uint32; Gmask: *[]Uint32; Bmask: *[]Uint32; Amask: *[]Uint32): bool
    proc MasksToPixelFormatEnum(bpp: integer; Rmask: Uint32; Gmask: Uint32; Bmask: Uint32; Amask: Uint32): Uint32
    proc AllocFormat(pixel_format: Uint32): *PixelFormat
    proc FreeFormat(format: *PixelFormat)
    proc AllocPalette(ncolors: integer): *Palette
    proc SetPixelFormatPalette(format: *PixelFormat; palette: *Palette): integer
    proc SetPaletteColors(palette: *Palette; colors: *Color; firstcolor: integer; ncolors: integer): integer
    proc FreePalette(palette: *Palette)
    proc MapRGB(format: *PixelFormat; r: Uint8; g: Uint8; b: Uint8): Uint32
    proc MapRGBA(format: *PixelFormat; r: Uint8; g: Uint8; b: Uint8; a: Uint8): Uint32
    proc GetRGB(pixel: Uint32; format: *PixelFormat; r: *[]Uint8; g: *[]Uint8; b: *[]Uint8)
    proc GetRGBA(pixel: Uint32; format: *PixelFormat; r: *[]Uint8; g: *[]Uint8; b: *[]Uint8; a: *[]Uint8)
    proc CalculateGammaRamp(gamma: real; ramp: *[]Uint16)

    // from platform.h
    proc GetPlatform(): *[]char

    // from power.h
    type
        PowerState = (POWERSTATE_UNKNOWN, POWERSTATE_ON_BATTERY, POWERSTATE_NO_BATTERY, POWERSTATE_CHARGING, POWERSTATE_CHARGED)

    proc GetPowerInfo(secs: *[]integer; pct: *[]integer): PowerState

    // from rect.h
    type
        Point = cstruct
                        x: integer
                        y: integer end
        FPoint = cstruct
                        x: real
                        y: real end
        Rect = cstruct
                        x: integer
                        y: integer
                        w: integer
                        h: integer end
        FRect = cstruct
                        x: real
                        y: real
                        w: real
                        h: real end

    proc HasIntersection(A: *Rect; B: *Rect): bool
    proc IntersectRect(A: *Rect; B: *Rect; result: *Rect): bool
    proc UnionRect(A: *Rect; B: *Rect; result: *Rect)
    proc EnclosePoints(points: *Point; count: integer; clip: *Rect; result: *Rect): bool
    proc IntersectRectAndLine(rect: *Rect; X1: *[]integer; Y1: *[]integer; X2: *[]integer; Y2: *[]integer): bool

    // from render.h
    type
        RendererFlags = integer
    const
        RENDERER_ACCELERATED = 2
        RENDERER_PRESENTVSYNC = 4
        RENDERER_SOFTWARE = 1
        RENDERER_TARGETTEXTURE = 8

    type
        RendererInfo = cstruct
                        name: *[]char
                        flags: Uint32
                        num_texture_formats: Uint32
                        texture_formats: carray 16 of Uint32
                        max_texture_width: integer
                        max_texture_height: integer end
        ScaleMode = (ScaleModeNearest, ScaleModeLinear, ScaleModeBest)
        TextureAccess = (TEXTUREACCESS_STATIC, TEXTUREACCESS_STREAMING, TEXTUREACCESS_TARGET)
        TextureModulate = (TEXTUREMODULATE_NONE, TEXTUREMODULATE_COLOR, TEXTUREMODULATE_ALPHA)
        RendererFlip = (FLIP_NONE, FLIP_HORIZONTAL, FLIP_VERTICAL)
        Renderer = cstruct end
        Texture = cstruct end

    proc GetNumRenderDrivers(): integer
    proc GetRenderDriverInfo(index: integer; info: *RendererInfo): integer
    proc CreateWindowAndRenderer(width: integer; height: integer; window_flags: Uint32; window: *[]*Window; renderer: *[]*Renderer): integer
    proc CreateRenderer(window: *Window; index: integer; flags: Uint32): *Renderer
    proc CreateSoftwareRenderer(surface: *Surface): *Renderer
    proc GetRenderer(window: *Window): *Renderer
    proc GetRendererInfo(renderer: *Renderer; info: *RendererInfo): integer
    proc GetRendererOutputSize(renderer: *Renderer; w: *[]integer; h: *[]integer): integer
    proc CreateTexture(renderer: *Renderer; format: Uint32; access: integer; w: integer; h: integer): *Texture
    proc CreateTextureFromSurface(renderer: *Renderer; surface: *Surface): *Texture
    proc QueryTexture(texture: *Texture; format: *[]Uint32; access: *[]integer; w: *[]integer; h: *[]integer): integer
    proc SetTextureColorMod(texture: *Texture; r: Uint8; g: Uint8; b: Uint8): integer
    proc GetTextureColorMod(texture: *Texture; r: *[]Uint8; g: *[]Uint8; b: *[]Uint8): integer
    proc SetTextureAlphaMod(texture: *Texture; alpha: Uint8): integer
    proc GetTextureAlphaMod(texture: *Texture; alpha: *[]Uint8): integer
    proc SetTextureBlendMode(texture: *Texture; blendMode: BlendMode): integer
    proc GetTextureBlendMode(texture: *Texture; blendMode: *[]BlendMode): integer
    proc SetTextureScaleMode(texture: *Texture; scaleMode: ScaleMode): integer
    proc GetTextureScaleMode(texture: *Texture; scaleMode: *[]ScaleMode): integer
    proc UpdateTexture(texture: *Texture; rect: *Rect; pixels: *void; pitch: integer): integer
    proc UpdateYUVTexture(texture: *Texture; rect: *Rect; Yplane: *[]Uint8; Ypitch: integer; Uplane: *[]Uint8; Upitch: integer; Vplane: *[]Uint8; Vpitch: integer): integer
    proc LockTexture(texture: *Texture; rect: *Rect; pixels: *[]*void; pitch: *[]integer): integer
    proc LockTextureToSurface(texture: *Texture; rect: *Rect; surface: *[]*Surface): integer
    proc UnlockTexture(texture: *Texture)
    proc RenderTargetSupported(renderer: *Renderer): bool
    proc SetRenderTarget(renderer: *Renderer; texture: *Texture): integer
    proc GetRenderTarget(renderer: *Renderer): *Texture
    proc RenderSetLogicalSize(renderer: *Renderer; w: integer; h: integer): integer
    proc RenderGetLogicalSize(renderer: *Renderer; w: *[]integer; h: *[]integer)
    proc RenderSetIntegerScale(renderer: *Renderer; enable: bool): integer
    proc RenderGetIntegerScale(renderer: *Renderer): bool
    proc RenderSetViewport(renderer: *Renderer; rect: *Rect): integer
    proc RenderGetViewport(renderer: *Renderer; rect: *Rect)
    proc RenderSetClipRect(renderer: *Renderer; rect: *Rect): integer
    proc RenderGetClipRect(renderer: *Renderer; rect: *Rect)
    proc RenderIsClipEnabled(renderer: *Renderer): bool
    proc RenderSetScale(renderer: *Renderer; scaleX: real; scaleY: real): integer
    proc RenderGetScale(renderer: *Renderer; scaleX: *[]real; scaleY: *[]real)
    proc SetRenderDrawColor(renderer: *Renderer; r: Uint8; g: Uint8; b: Uint8; a: Uint8): integer
    proc GetRenderDrawColor(renderer: *Renderer; r: *[]Uint8; g: *[]Uint8; b: *[]Uint8; a: *[]Uint8): integer
    proc SetRenderDrawBlendMode(renderer: *Renderer; blendMode: BlendMode): integer
    proc GetRenderDrawBlendMode(renderer: *Renderer; blendMode: *[]BlendMode): integer
    proc RenderClear(renderer: *Renderer): integer
    proc RenderDrawPoint(renderer: *Renderer; x: integer; y: integer): integer
    proc RenderDrawPoints(renderer: *Renderer; points: *Point; count: integer): integer
    proc RenderDrawLine(renderer: *Renderer; x1: integer; y1: integer; x2: integer; y2: integer): integer
    proc RenderDrawLines(renderer: *Renderer; points: *Point; count: integer): integer
    proc RenderDrawRect(renderer: *Renderer; rect: *Rect): integer
    proc RenderDrawRects(renderer: *Renderer; rects: *Rect; count: integer): integer
    proc RenderFillRect(renderer: *Renderer; rect: *Rect): integer
    proc RenderFillRects(renderer: *Renderer; rects: *Rect; count: integer): integer
    proc RenderCopy(renderer: *Renderer; texture: *Texture; srcrect: *Rect; dstrect: *Rect): integer
    proc RenderCopyEx(renderer: *Renderer; texture: *Texture; srcrect: *Rect; dstrect: *Rect; angle: longreal; center: *Point; flip: RendererFlip): integer
    proc RenderDrawPointF(renderer: *Renderer; x: real; y: real): integer
    proc RenderDrawPointsF(renderer: *Renderer; points: *FPoint; count: integer): integer
    proc RenderDrawLineF(renderer: *Renderer; x1: real; y1: real; x2: real; y2: real): integer
    proc RenderDrawLinesF(renderer: *Renderer; points: *FPoint; count: integer): integer
    proc RenderDrawRectF(renderer: *Renderer; rect: *FRect): integer
    proc RenderDrawRectsF(renderer: *Renderer; rects: *FRect; count: integer): integer
    proc RenderFillRectF(renderer: *Renderer; rect: *FRect): integer
    proc RenderFillRectsF(renderer: *Renderer; rects: *FRect; count: integer): integer
    proc RenderCopyF(renderer: *Renderer; texture: *Texture; srcrect: *Rect; dstrect: *FRect): integer
    proc RenderCopyExF(renderer: *Renderer; texture: *Texture; srcrect: *Rect; dstrect: *FRect; angle: longreal; center: *FPoint; flip: RendererFlip): integer
    proc RenderReadPixels(renderer: *Renderer; rect: *Rect; format: Uint32; pixels: *void; pitch: integer): integer
    proc RenderPresent(renderer: *Renderer)
    proc DestroyTexture(texture: *Texture)
    proc DestroyRenderer(renderer: *Renderer)
    proc RenderFlush(renderer: *Renderer): integer
    proc GL_BindTexture(texture: *Texture; texw: *[]real; texh: *[]real): integer
    proc GL_UnbindTexture(texture: *Texture): integer
    proc RenderGetMetalLayer(renderer: *Renderer): *void
    proc RenderGetMetalCommandEncoder(renderer: *Renderer): *void

    // from rwops.h
    const
        RWOPS_UNKNOWN = 0
        RWOPS_WINFILE = 1
        RWOPS_STDFILE = 2
        RWOPS_JNIFILE = 3
        RWOPS_MEMORY = 4
        RWOPS_MEMORY_RO = 5
        RW_SEEK_SET = 0
        RW_SEEK_CUR = 1
        RW_SEEK_END = 2

    type
        RWops = cstruct
                        size: proc(context: *RWops): GestureID
                        seek: proc(context: *RWops; offset: Sint64; whence: integer): GestureID
                        read: proc(context: *RWops; ptr: *void; size: size_t; maxnum: size_t): Uint64
                        write: proc(context: *RWops; ptr: *void; size: size_t; num: size_t): Uint64
                        close_: proc(context: *RWops): integer
                        type_: Uint32
                        hidden: cunion
                                    mem: cstruct
                                                base: *[]Uint8
                                                here: *[]Uint8
                                                stop: *[]Uint8 end
                                    unknown: cstruct
                                                data1: *void
                                                data2: *void end end end

    proc RWFromFile(file: *[]char; mode: *[]char): *RWops
    proc RWFromFP(fp: *void; autoclose: bool): *RWops
    proc RWFromMem(mem: *void; size: integer): *RWops
    proc RWFromConstMem(mem: *void; size: integer): *RWops
    proc AllocRW(): *RWops
    proc FreeRW(area: *RWops)
    proc RWsize(context: *RWops): GestureID
    proc RWseek(context: *RWops; offset: Sint64; whence: integer): GestureID
    proc RWtell(context: *RWops): GestureID
    proc RWread(context: *RWops; ptr: *void; size: size_t; maxnum: size_t): Uint64
    proc RWwrite(context: *RWops; ptr: *void; size: size_t; num: size_t): Uint64
    proc RWclose(context: *RWops): integer
    proc LoadFile_RW(src: *RWops; datasize: *[]Uint64; freesrc: integer): *void
    proc LoadFile(file: *[]char; datasize: *[]Uint64): *void
    proc ReadU8(src: *RWops): Uint8
    proc ReadLE16(src: *RWops): Uint16
    proc ReadBE16(src: *RWops): Uint16
    proc ReadLE32(src: *RWops): Uint32
    proc ReadBE32(src: *RWops): Uint32
    proc ReadLE64(src: *RWops): Uint64
    proc ReadBE64(src: *RWops): Uint64
    proc WriteU8(dst: *RWops; value: Uint8): Uint64
    proc WriteLE16(dst: *RWops; value: Uint16): Uint64
    proc WriteBE16(dst: *RWops; value: Uint16): Uint64
    proc WriteLE32(dst: *RWops; value: Uint32): Uint64
    proc WriteBE32(dst: *RWops; value: Uint32): Uint64
    proc WriteLE64(dst: *RWops; value: Uint64): Uint64
    proc WriteBE64(dst: *RWops; value: Uint64): Uint64

    // from scancode.h
    type
        Scancode = integer
    const
        NUM_SCANCODES = 512
        SCANCODE_0 = 39
        SCANCODE_1 = 30
        SCANCODE_2 = 31
        SCANCODE_3 = 32
        SCANCODE_4 = 33
        SCANCODE_5 = 34
        SCANCODE_6 = 35
        SCANCODE_7 = 36
        SCANCODE_8 = 37
        SCANCODE_9 = 38
        SCANCODE_A = 4
        SCANCODE_AC_BACK = 270
        SCANCODE_AC_BOOKMARKS = 274
        SCANCODE_AC_FORWARD = 271
        SCANCODE_AC_HOME = 269
        SCANCODE_AC_REFRESH = 273
        SCANCODE_AC_SEARCH = 268
        SCANCODE_AC_STOP = 272
        SCANCODE_AGAIN = 121
        SCANCODE_ALTERASE = 153
        SCANCODE_APOSTROPHE = 52
        SCANCODE_APP1 = 283
        SCANCODE_APP2 = 284
        SCANCODE_APPLICATION = 101
        SCANCODE_AUDIOFASTFORWARD = 286
        SCANCODE_AUDIOMUTE = 262
        SCANCODE_AUDIONEXT = 258
        SCANCODE_AUDIOPLAY = 261
        SCANCODE_AUDIOPREV = 259
        SCANCODE_AUDIOREWIND = 285
        SCANCODE_AUDIOSTOP = 260
        SCANCODE_B = 5
        SCANCODE_BACKSLASH = 49
        SCANCODE_BACKSPACE = 42
        SCANCODE_BRIGHTNESSDOWN = 275
        SCANCODE_BRIGHTNESSUP = 276
        SCANCODE_C = 6
        SCANCODE_CALCULATOR = 266
        SCANCODE_CANCEL = 155
        SCANCODE_CAPSLOCK = 57
        SCANCODE_CLEAR = 156
        SCANCODE_CLEARAGAIN = 162
        SCANCODE_COMMA = 54
        SCANCODE_COMPUTER = 267
        SCANCODE_COPY = 124
        SCANCODE_CRSEL = 163
        SCANCODE_CURRENCYSUBUNIT = 181
        SCANCODE_CURRENCYUNIT = 180
        SCANCODE_CUT = 123
        SCANCODE_D = 7
        SCANCODE_DECIMALSEPARATOR = 179
        SCANCODE_DELETE = 76
        SCANCODE_DISPLAYSWITCH = 277
        SCANCODE_DOWN = 81
        SCANCODE_E = 8
        SCANCODE_EJECT = 281
        SCANCODE_END = 77
        SCANCODE_EQUALS = 46
        SCANCODE_ESCAPE = 41
        SCANCODE_EXECUTE = 116
        SCANCODE_EXSEL = 164
        SCANCODE_F = 9
        SCANCODE_F1 = 58
        SCANCODE_F10 = 67
        SCANCODE_F11 = 68
        SCANCODE_F12 = 69
        SCANCODE_F13 = 104
        SCANCODE_F14 = 105
        SCANCODE_F15 = 106
        SCANCODE_F16 = 107
        SCANCODE_F17 = 108
        SCANCODE_F18 = 109
        SCANCODE_F19 = 110
        SCANCODE_F2 = 59
        SCANCODE_F20 = 111
        SCANCODE_F21 = 112
        SCANCODE_F22 = 113
        SCANCODE_F23 = 114
        SCANCODE_F24 = 115
        SCANCODE_F3 = 60
        SCANCODE_F4 = 61
        SCANCODE_F5 = 62
        SCANCODE_F6 = 63
        SCANCODE_F7 = 64
        SCANCODE_F8 = 65
        SCANCODE_F9 = 66
        SCANCODE_FIND = 126
        SCANCODE_G = 10
        SCANCODE_GRAVE = 53
        SCANCODE_H = 11
        SCANCODE_HELP = 117
        SCANCODE_HOME = 74
        SCANCODE_I = 12
        SCANCODE_INSERT = 73
        SCANCODE_INTERNATIONAL1 = 135
        SCANCODE_INTERNATIONAL2 = 136
        SCANCODE_INTERNATIONAL3 = 137
        SCANCODE_INTERNATIONAL4 = 138
        SCANCODE_INTERNATIONAL5 = 139
        SCANCODE_INTERNATIONAL6 = 140
        SCANCODE_INTERNATIONAL7 = 141
        SCANCODE_INTERNATIONAL8 = 142
        SCANCODE_INTERNATIONAL9 = 143
        SCANCODE_J = 13
        SCANCODE_K = 14
        SCANCODE_KBDILLUMDOWN = 279
        SCANCODE_KBDILLUMTOGGLE = 278
        SCANCODE_KBDILLUMUP = 280
        SCANCODE_KP_0 = 98
        SCANCODE_KP_00 = 176
        SCANCODE_KP_000 = 177
        SCANCODE_KP_1 = 89
        SCANCODE_KP_2 = 90
        SCANCODE_KP_3 = 91
        SCANCODE_KP_4 = 92
        SCANCODE_KP_5 = 93
        SCANCODE_KP_6 = 94
        SCANCODE_KP_7 = 95
        SCANCODE_KP_8 = 96
        SCANCODE_KP_9 = 97
        SCANCODE_KP_A = 188
        SCANCODE_KP_AMPERSAND = 199
        SCANCODE_KP_AT = 206
        SCANCODE_KP_B = 189
        SCANCODE_KP_BACKSPACE = 187
        SCANCODE_KP_BINARY = 218
        SCANCODE_KP_C = 190
        SCANCODE_KP_CLEAR = 216
        SCANCODE_KP_CLEARENTRY = 217
        SCANCODE_KP_COLON = 203
        SCANCODE_KP_COMMA = 133
        SCANCODE_KP_D = 191
        SCANCODE_KP_DBLAMPERSAND = 200
        SCANCODE_KP_DBLVERTICALBAR = 202
        SCANCODE_KP_DECIMAL = 220
        SCANCODE_KP_DIVIDE = 84
        SCANCODE_KP_E = 192
        SCANCODE_KP_ENTER = 88
        SCANCODE_KP_EQUALS = 103
        SCANCODE_KP_EQUALSAS400 = 134
        SCANCODE_KP_EXCLAM = 207
        SCANCODE_KP_F = 193
        SCANCODE_KP_GREATER = 198
        SCANCODE_KP_HASH = 204
        SCANCODE_KP_HEXADECIMAL = 221
        SCANCODE_KP_LEFTBRACE = 184
        SCANCODE_KP_LEFTPAREN = 182
        SCANCODE_KP_LESS = 197
        SCANCODE_KP_MEMADD = 211
        SCANCODE_KP_MEMCLEAR = 210
        SCANCODE_KP_MEMDIVIDE = 214
        SCANCODE_KP_MEMMULTIPLY = 213
        SCANCODE_KP_MEMRECALL = 209
        SCANCODE_KP_MEMSTORE = 208
        SCANCODE_KP_MEMSUBTRACT = 212
        SCANCODE_KP_MINUS = 86
        SCANCODE_KP_MULTIPLY = 85
        SCANCODE_KP_OCTAL = 219
        SCANCODE_KP_PERCENT = 196
        SCANCODE_KP_PERIOD = 99
        SCANCODE_KP_PLUS = 87
        SCANCODE_KP_PLUSMINUS = 215
        SCANCODE_KP_POWER = 195
        SCANCODE_KP_RIGHTBRACE = 185
        SCANCODE_KP_RIGHTPAREN = 183
        SCANCODE_KP_SPACE = 205
        SCANCODE_KP_TAB = 186
        SCANCODE_KP_VERTICALBAR = 201
        SCANCODE_KP_XOR = 194
        SCANCODE_L = 15
        SCANCODE_LALT = 226
        SCANCODE_LANG1 = 144
        SCANCODE_LANG2 = 145
        SCANCODE_LANG3 = 146
        SCANCODE_LANG4 = 147
        SCANCODE_LANG5 = 148
        SCANCODE_LANG6 = 149
        SCANCODE_LANG7 = 150
        SCANCODE_LANG8 = 151
        SCANCODE_LANG9 = 152
        SCANCODE_LCTRL = 224
        SCANCODE_LEFT = 80
        SCANCODE_LEFTBRACKET = 47
        SCANCODE_LGUI = 227
        SCANCODE_LSHIFT = 225
        SCANCODE_M = 16
        SCANCODE_MAIL = 265
        SCANCODE_MEDIASELECT = 263
        SCANCODE_MENU = 118
        SCANCODE_MINUS = 45
        SCANCODE_MODE = 257
        SCANCODE_MUTE = 127
        SCANCODE_N = 17
        SCANCODE_NONUSBACKSLASH = 100
        SCANCODE_NONUSHASH = 50
        SCANCODE_NUMLOCKCLEAR = 83
        SCANCODE_O = 18
        SCANCODE_OPER = 161
        SCANCODE_OUT = 160
        SCANCODE_P = 19
        SCANCODE_PAGEDOWN = 78
        SCANCODE_PAGEUP = 75
        SCANCODE_PASTE = 125
        SCANCODE_PAUSE = 72
        SCANCODE_PERIOD = 55
        SCANCODE_POWER = 102
        SCANCODE_PRINTSCREEN = 70
        SCANCODE_PRIOR = 157
        SCANCODE_Q = 20
        SCANCODE_R = 21
        SCANCODE_RALT = 230
        SCANCODE_RCTRL = 228
        SCANCODE_RETURN = 40
        SCANCODE_RETURN2 = 158
        SCANCODE_RGUI = 231
        SCANCODE_RIGHT = 79
        SCANCODE_RIGHTBRACKET = 48
        SCANCODE_RSHIFT = 229
        SCANCODE_S = 22
        SCANCODE_SCROLLLOCK = 71
        SCANCODE_SELECT = 119
        SCANCODE_SEMICOLON = 51
        SCANCODE_SEPARATOR = 159
        SCANCODE_SLASH = 56
        SCANCODE_SLEEP = 282
        SCANCODE_SPACE = 44
        SCANCODE_STOP = 120
        SCANCODE_SYSREQ = 154
        SCANCODE_T = 23
        SCANCODE_TAB = 43
        SCANCODE_THOUSANDSSEPARATOR = 178
        SCANCODE_U = 24
        SCANCODE_UNDO = 122
        SCANCODE_UNKNOWN = 0
        SCANCODE_UP = 82
        SCANCODE_V = 25
        SCANCODE_VOLUMEDOWN = 129
        SCANCODE_VOLUMEUP = 128
        SCANCODE_W = 26
        SCANCODE_WWW = 264
        SCANCODE_X = 27
        SCANCODE_Y = 28
        SCANCODE_Z = 29


    // from sensor.h
    const
        STANDARD_GRAVITY = 9.80665

    type
        Sensor = cstruct end
        SensorType = integer
    const
        SENSOR_ACCEL = 1
        SENSOR_GYRO = 2
        SENSOR_INVALID = -1
        SENSOR_UNKNOWN = 0

    type
        SensorID = int32_t

    proc LockSensors
    proc UnlockSensors
    proc NumSensors(): integer
    proc SensorGetDeviceName(device_index: integer): *[]char
    proc SensorGetDeviceType(device_index: integer): SensorType
    proc SensorGetDeviceNonPortableType(device_index: integer): integer
    proc SensorGetDeviceInstanceID(device_index: integer): integer
    proc SensorOpen(device_index: integer): *Sensor
    proc SensorFromInstanceID(instance_id: SensorID): *Sensor
    proc SensorGetName(sensor: *Sensor): *[]char
    proc SensorGetType(sensor: *Sensor): SensorType
    proc SensorGetNonPortableType(sensor: *Sensor): integer
    proc SensorGetInstanceID(sensor: *Sensor): integer
    proc SensorGetData(sensor: *Sensor; data: *[]real; num_values: integer): integer
    proc SensorClose(sensor: *Sensor)
    proc SensorUpdate

    // from shape.h
    const
        NONSHAPEABLE_WINDOW = -1
        INVALID_SHAPE_ARGUMENT = -2
        WINDOW_LACKS_SHAPE = -3

    type
        WindowShapeMode2 = (ShapeModeDefault, ShapeModeBinarizeAlpha, ShapeModeReverseBinarizeAlpha, ShapeModeColorKey)
        WindowShapeParams = cunion
                        binarizationCutoff: Uint8
                        colorKey: Color end
        WindowShapeMode = cstruct
                        mode: WindowShapeMode2
                        parameters: WindowShapeParams end

    proc CreateShapedWindow(title: *[]char; x: Uint32; y: Uint32; w: Uint32; h: Uint32; flags: Uint32): *Window
    proc IsShapedWindow(window: *Window): bool
    proc SetWindowShape(window: *Window; shape: *Surface; shape_mode: *WindowShapeMode): integer
    proc GetShapedWindowMode(window: *Window; shape_mode: *WindowShapeMode): integer

    // from stdinc.h
    const
        MAX_SINT8 = 7Fh
        MIN_SINT8 = bitnot(7Fh)
        MAX_UINT8 = 0FFh
        MIN_UINT8 = 00h
        MAX_SINT16 = 7FFFh
        MIN_SINT16 = bitnot(7FFFh)
        MAX_UINT16 = 0FFFFh
        MIN_UINT16 = 0000h
        MAX_SINT32 = 7FFFFFFFh
        MIN_SINT32 = bitnot(7FFFFFFFh)
        MAX_UINT32 = 0FFFFFFFFh
        MIN_UINT32 = 00000000h
        MAX_SINT64 = 7FFFFFFFFFFFFFFFh
        MIN_SINT64 = bitnot(7FFFFFFFFFFFFFFFh)
        MAX_UINT64 = 0FFFFFFFFFFFFFFFFh
        MIN_UINT64 = 0000000000000000h
        PRIs64 = nil // CHECK "lld"
        PRIu64 = nil // CHECK "llu"
        PRIx64 = nil // CHECK "llx"
        PRIX64 = nil // CHECK "llX"
        M_PI = 3.14159265358979323846264338327950288
        ICONV_ERROR = -1
        ICONV_E2BIG = -2
        ICONV_EILSEQ = -3
        ICONV_EINVAL = -4

    type
        compile_time_assert_enum = carray 1 of integer
        compile_time_assert_sint64 = carray 1 of integer
        compile_time_assert_sint16 = carray 1 of integer
        compile_time_assert_sint32 = carray 1 of integer
        compile_time_assert_uint8 = carray 1 of integer
        compile_time_assert_uint64 = carray 1 of integer
        compile_time_assert_uint32 = carray 1 of integer
        compile_time_assert_uint16 = carray 1 of integer
        compile_time_assert_sint8 = carray 1 of integer
        compile_time_assert_Event = carray 1 of integer
        bool = (FALSE_, TRUE_)
        DUMMY_ENUM = (DUMMY_ENUM_VALUE)
        malloc_func = proc(size: size_t): *void
        calloc_func = proc(nmemb: size_t; size: size_t): *void
        realloc_func = proc(mem: *void; size: size_t): *void
        free_func = proc(mem: *void)
        _iconv_t = cstruct end
        iconv_t = *_iconv_t
        Sint8 = int8_t
        Uint8 = uint8_t
        Sint16 = int16_t
        Uint16 = uint16_t
        Sint32 = int32_t
        Uint32 = wchar_t
        Sint64 = ptrdiff_t
        Uint64 = size_t

    proc malloc(size: size_t): *void
    proc calloc(nmemb: size_t; size: size_t): *void
    proc realloc(mem: *void; size: size_t): *void
    proc free(mem: *void)
    proc GetMemoryFunctions(malloc_func: *[]proc(size: size_t): *void; calloc_func: *[]proc(nmemb: size_t; size: size_t): *void; realloc_func: *[]proc(mem: *void; size: size_t): *void; free_func: *[]proc(mem: *void))
    proc SetMemoryFunctions(malloc_func: malloc_func; calloc_func: calloc_func; realloc_func: realloc_func; free_func: free_func): integer
    proc GetNumAllocations(): integer
    proc getenv(name: *[]Sint8): *[]Sint8
    proc setenv(name: *[]Sint8; value: *[]Sint8; overwrite: integer): integer
    proc qsort(base: *void; nmemb: size_t; size: size_t; compare: proc(_1: *void; _2: *void): integer)
    proc abs(x: integer): integer
    proc isdigit(x: integer): integer
    proc isspace(x: integer): integer
    proc isupper(x: integer): integer
    proc islower(x: integer): integer
    proc toupper(x: integer): integer
    proc tolower(x: integer): integer
    proc crc32(crc: Uint32; data: *void; len: size_t): Uint32
    proc memset(dst: *void; c: integer; len: size_t): *void
    proc memcpy(dst: *void; src: *void; len: size_t): *void
    proc memmove(dst: *void; src: *void; len: size_t): *void
    proc memcmp(s1: *void; s2: *void; len: size_t): integer
    proc wcslen(wstr: *[]Uint32): size_t
    proc wcslcpy(dst: *[]Uint32; src: *[]Uint32; maxlen: size_t): size_t
    proc wcslcat(dst: *[]Uint32; src: *[]Uint32; maxlen: size_t): size_t
    proc wcsdup(wstr: *[]Uint32): *[]Uint32
    proc wcsstr(haystack: *[]Uint32; needle: *[]Uint32): *[]Uint32
    proc wcscmp(str1: *[]Uint32; str2: *[]Uint32): integer
    proc wcsncmp(str1: *[]Uint32; str2: *[]Uint32; maxlen: size_t): integer
    proc wcscasecmp(str1: *[]Uint32; str2: *[]Uint32): integer
    proc wcsncasecmp(str1: *[]Uint32; str2: *[]Uint32; len: size_t): integer
    proc strlen(str: *[]Sint8): size_t
    proc strlcpy(dst: *[]Sint8; src: *[]Sint8; maxlen: size_t): size_t
    proc utf8strlcpy(dst: *[]Sint8; src: *[]Sint8; dst_bytes: size_t): size_t
    proc strlcat(dst: *[]Sint8; src: *[]Sint8; maxlen: size_t): size_t
    proc strdup(str: *[]Sint8): *[]Sint8
    proc strrev(str: *[]Sint8): *[]Sint8
    proc strupr(str: *[]Sint8): *[]Sint8
    proc strlwr(str: *[]Sint8): *[]Sint8
    proc strchr(str: *[]Sint8; c: integer): *[]Sint8
    proc strrchr(str: *[]Sint8; c: integer): *[]Sint8
    proc strstr(haystack: *[]Sint8; needle: *[]Sint8): *[]Sint8
    proc strtokr(s1: *[]Sint8; s2: *[]Sint8; saveptr: *[]*[]char): *[]Sint8
    proc utf8strlen(str: *[]Sint8): size_t
    proc itoa(value: integer; str: *[]Sint8; radix: integer): *[]Sint8
    proc uitoa(value: Uint32; str: *[]Sint8; radix: integer): *[]Sint8
    proc ltoa(value: Sint64; str: *[]Sint8; radix: integer): *[]Sint8
    proc ultoa(value: size_t; str: *[]Sint8; radix: integer): *[]Sint8
    proc lltoa(value: Sint64; str: *[]Sint8; radix: integer): *[]Sint8
    proc ulltoa(value: Uint64; str: *[]Sint8; radix: integer): *[]Sint8
    proc atoi(str: *[]Sint8): integer
    proc atof(str: *[]Sint8): longreal
    proc strtol(str: *[]Sint8; endp: *[]*[]char; base: integer): Sint64
    proc strtoul(str: *[]Sint8; endp: *[]*[]char; base: integer): size_t
    proc strtoll(str: *[]Sint8; endp: *[]*[]char; base: integer): Sint64
    proc strtoull(str: *[]Sint8; endp: *[]*[]char; base: integer): size_t
    proc strtod(str: *[]Sint8; endp: *[]*[]char): longreal
    proc strcmp(str1: *[]Sint8; str2: *[]Sint8): integer
    proc strncmp(str1: *[]Sint8; str2: *[]Sint8; maxlen: size_t): integer
    proc strcasecmp(str1: *[]Sint8; str2: *[]Sint8): integer
    proc strncasecmp(str1: *[]Sint8; str2: *[]Sint8; len: size_t): integer
    proc sscanf(text: *[]Sint8; fmt: *[]Sint8): integer [varargs]
    proc vsscanf(text: *[]Sint8; fmt: *[]Sint8; _3: *__va_elem): integer
    proc snprintf(text: *[]Sint8; maxlen: size_t; fmt: *[]Sint8): integer [varargs]
    proc vsnprintf(text: *[]Sint8; maxlen: size_t; fmt: *[]Sint8; _4: *__va_elem): integer
    proc acos(x: longreal): longreal
    proc acosf(x: real): real
    proc asin(x: longreal): longreal
    proc asinf(x: real): real
    proc atan(x: longreal): longreal
    proc atanf(x: real): real
    proc atan2(x: longreal; y: longreal): longreal
    proc atan2f(x: real; y: real): real
    proc ceil(x: longreal): longreal
    proc ceilf(x: real): real
    proc copysign(x: longreal; y: longreal): longreal
    proc copysignf(x: real; y: real): real
    proc cos(x: longreal): longreal
    proc cosf(x: real): real
    proc exp(x: longreal): longreal
    proc expf(x: real): real
    proc fabs(x: longreal): longreal
    proc fabsf(x: real): real
    proc floor(x: longreal): longreal
    proc floorf(x: real): real
    proc trunc(x: longreal): longreal
    proc truncf(x: real): real
    proc fmod(x: longreal; y: longreal): longreal
    proc fmodf(x: real; y: real): real
    proc log(x: longreal): longreal
    proc logf(x: real): real
    proc log10(x: longreal): longreal
    proc log10f(x: real): real
    proc pow(x: longreal; y: longreal): longreal
    proc powf(x: real; y: real): real
    proc scalbn(x: longreal; n: integer): longreal
    proc scalbnf(x: real; n: integer): real
    proc sin(x: longreal): longreal
    proc sinf(x: real): real
    proc sqrt(x: longreal): longreal
    proc sqrtf(x: real): real
    proc tan(x: longreal): longreal
    proc tanf(x: real): real
    proc iconv_open(tocode: *[]Sint8; fromcode: *[]Sint8): iconv_t
    proc iconv_close(cd: iconv_t): integer
    proc iconv(cd: iconv_t; inbuf: *[]*[]char; inbytesleft: *[]size_t; outbuf: *[]*[]char; outbytesleft: *[]size_t): size_t
    proc iconv_string(tocode: *[]Sint8; fromcode: *[]Sint8; inbuf: *[]Sint8; inbytesleft: size_t): *[]Sint8

    // from surface.h
    const
        SWSURFACE = 0
        PREALLOC = 00000001h
        RLEACCEL = 00000002h
        DONTFREE = 00000004h
        SIMD_ALIGNED = 00000008h
        BlitSurface = nil // CHECK UpperBlit
        BlitScaled = nil // CHECK UpperBlitScaled

    type
        BlitMap = cstruct end
        Surface = cstruct
                        flags: Uint32
                        format: *PixelFormat
                        w: integer
                        h: integer
                        pitch: integer
                        pixels: *void
                        userdata: *void
                        locked: integer
                        list_blitmap: *void
                        clip_rect: Rect
                        map: *BlitMap
                        refcount: integer end
        blit = proc(src: *Surface; srcrect: *Rect; dst: *Surface; dstrect: *Rect): integer
        YUV_CONVERSION_MODE = (YUV_CONVERSION_JPEG, YUV_CONVERSION_BT601, YUV_CONVERSION_BT709, YUV_CONVERSION_AUTOMATIC)

    proc CreateRGBSurface(flags: Uint32; width: integer; height: integer; depth: integer; Rmask: Uint32; Gmask: Uint32; Bmask: Uint32; Amask: Uint32): *Surface
    proc CreateRGBSurfaceWithFormat(flags: Uint32; width: integer; height: integer; depth: integer; format: Uint32): *Surface
    proc CreateRGBSurfaceFrom(pixels: *void; width: integer; height: integer; depth: integer; pitch: integer; Rmask: Uint32; Gmask: Uint32; Bmask: Uint32; Amask: Uint32): *Surface
    proc CreateRGBSurfaceWithFormatFrom(pixels: *void; width: integer; height: integer; depth: integer; pitch: integer; format: Uint32): *Surface
    proc FreeSurface(surface: *Surface)
    proc SetSurfacePalette(surface: *Surface; palette: *Palette): integer
    proc LockSurface(surface: *Surface): integer
    proc UnlockSurface(surface: *Surface)
    proc LoadBMP_RW(src: *RWops; freesrc: integer): *Surface
    proc SaveBMP_RW(surface: *Surface; dst: *RWops; freedst: integer): integer
    proc SetSurfaceRLE(surface: *Surface; flag: integer): integer
    proc HasSurfaceRLE(surface: *Surface): bool
    proc SetColorKey(surface: *Surface; flag: integer; key: Uint32): integer
    proc HasColorKey(surface: *Surface): bool
    proc GetColorKey(surface: *Surface; key: *[]Uint32): integer
    proc SetSurfaceColorMod(surface: *Surface; r: Uint8; g: Uint8; b: Uint8): integer
    proc GetSurfaceColorMod(surface: *Surface; r: *[]Uint8; g: *[]Uint8; b: *[]Uint8): integer
    proc SetSurfaceAlphaMod(surface: *Surface; alpha: Uint8): integer
    proc GetSurfaceAlphaMod(surface: *Surface; alpha: *[]Uint8): integer
    proc SetSurfaceBlendMode(surface: *Surface; blendMode: BlendMode): integer
    proc GetSurfaceBlendMode(surface: *Surface; blendMode: *[]BlendMode): integer
    proc SetClipRect(surface: *Surface; rect: *Rect): bool
    proc GetClipRect(surface: *Surface; rect: *Rect)
    proc DuplicateSurface(surface: *Surface): *Surface
    proc ConvertSurface(src: *Surface; fmt: *PixelFormat; flags: Uint32): *Surface
    proc ConvertSurfaceFormat(src: *Surface; pixel_format: Uint32; flags: Uint32): *Surface
    proc ConvertPixels(width: integer; height: integer; src_format: Uint32; src: *void; src_pitch: integer; dst_format: Uint32; dst: *void; dst_pitch: integer): integer
    proc FillRect(dst: *Surface; rect: *Rect; color: Uint32): integer
    proc FillRects(dst: *Surface; rects: *Rect; count: integer; color: Uint32): integer
    proc UpperBlit(src: *Surface; srcrect: *Rect; dst: *Surface; dstrect: *Rect): integer
    proc LowerBlit(src: *Surface; srcrect: *Rect; dst: *Surface; dstrect: *Rect): integer
    proc SoftStretch(src: *Surface; srcrect: *Rect; dst: *Surface; dstrect: *Rect): integer
    proc UpperBlitScaled(src: *Surface; srcrect: *Rect; dst: *Surface; dstrect: *Rect): integer
    proc LowerBlitScaled(src: *Surface; srcrect: *Rect; dst: *Surface; dstrect: *Rect): integer
    proc SetYUVConversionMode(mode: YUV_CONVERSION_MODE)
    proc GetYUVConversionMode(): YUV_CONVERSION_MODE
    proc GetYUVConversionModeForResolution(width: integer; height: integer): YUV_CONVERSION_MODE

    // from system.h
    proc IsTablet(): bool
    proc OnApplicationWillTerminate
    proc OnApplicationDidReceiveMemoryWarning
    proc OnApplicationWillResignActive
    proc OnApplicationDidEnterBackground
    proc OnApplicationWillEnterForeground
    proc OnApplicationDidBecomeActive

    // from thread.h
    type
        Thread = cstruct end
        ThreadPriority = (THREAD_PRIORITY_LOW, THREAD_PRIORITY_NORMAL, THREAD_PRIORITY_HIGH, THREAD_PRIORITY_TIME_CRITICAL)
        ThreadFunction = proc(data: *void): integer
        threadID = size_t
        TLSID = wchar_t

    proc CreateThread(fn: ThreadFunction; name: *[]Sint8; data: *void): *Thread
    proc CreateThreadWithStackSize(fn: ThreadFunction; name: *[]Sint8; stacksize: size_t; data: *void): *Thread
    proc GetThreadName(thread: *Thread): *[]Sint8
    proc ThreadID(): size_t
    proc GetThreadID(thread: *Thread): size_t
    proc SetThreadPriority(priority: ThreadPriority): integer
    proc WaitThread(thread: *Thread; status: *[]integer)
    proc DetachThread(thread: *Thread)
    proc TLSCreate(): Uint32
    proc TLSGet(id: TLSID): *void
    proc TLSSet(id: TLSID; value: *void; destructor: proc(_1: *void)): integer

    // from timer.h
    type
        TimerCallback = proc(interval: Uint32; param: *void): Uint32
        TimerID = int32_t

    proc GetTicks(): Uint32
    proc GetPerformanceCounter(): size_t
    proc GetPerformanceFrequency(): size_t
    proc Delay(ms: Uint32)
    proc AddTimer(interval: Uint32; callback: TimerCallback; param: *void): integer
    proc RemoveTimer(id: TimerID): bool

    // from touch.h
    const
        TOUCH_MOUSEID = -1
        MOUSE_TOUCHID = -1

    type
        TouchDeviceType = integer
    const
        TOUCH_DEVICE_DIRECT = 0
        TOUCH_DEVICE_INDIRECT_ABSOLUTE = 1
        TOUCH_DEVICE_INDIRECT_RELATIVE = 2
        TOUCH_DEVICE_INVALID = -1

    type
        Finger = cstruct
                        id: Sint64
                        x: real
                        y: real
                        pressure: real end
        TouchID = ptrdiff_t
        FingerID = ptrdiff_t

    proc GetNumTouchDevices(): integer
    proc GetTouchDevice(index: integer): Sint64
    proc GetTouchDeviceType(touchID: TouchID): TouchDeviceType
    proc GetNumTouchFingers(touchID: TouchID): integer
    proc GetTouchFinger(touchID: TouchID; index: integer): *Finger

    // from version.h
    const
        MAJOR_VERSION = 2
        MINOR_VERSION = 0
        PATCHLEVEL = 14
        COMPILEDVERSION = 2 * 1000 + 0 * 100 + 14

    type
        version = cstruct
                        major: Uint8
                        minor: Uint8
                        patch: Uint8 end

    proc GetVersion(ver: *version)
    proc GetRevision(): *[]Sint8
    proc GetRevisionNumber(): integer

    // from video.h
    const
        WINDOWPOS_UNDEFINED_MASK = 1FFF0000h
        WINDOWPOS_UNDEFINED = bitor(1FFF0000h, 0)
        WINDOWPOS_CENTERED_MASK = 2FFF0000h
        WINDOWPOS_CENTERED = bitor(2FFF0000h, 0)

    type
        DisplayMode = cstruct
                        format: Uint32
                        w: integer
                        h: integer
                        refresh_rate: integer
                        driverdata: *void end
        Window = cstruct end
        WindowFlags = integer
    const
        WINDOW_ALLOW_HIGHDPI = 8192
        WINDOW_ALWAYS_ON_TOP = 32768
        WINDOW_BORDERLESS = 16
        WINDOW_FOREIGN = 2048
        WINDOW_FULLSCREEN = 1
        WINDOW_FULLSCREEN_DESKTOP = 4097
        WINDOW_HIDDEN = 8
        WINDOW_INPUT_FOCUS = 512
        WINDOW_INPUT_GRABBED = 256
        WINDOW_MAXIMIZED = 128
        WINDOW_METAL = 536870912
        WINDOW_MINIMIZED = 64
        WINDOW_MOUSE_CAPTURE = 16384
        WINDOW_MOUSE_FOCUS = 1024
        WINDOW_OPENGL = 2
        WINDOW_POPUP_MENU = 524288
        WINDOW_RESIZABLE = 32
        WINDOW_SHOWN = 4
        WINDOW_SKIP_TASKBAR = 65536
        WINDOW_TOOLTIP = 262144
        WINDOW_UTILITY = 131072
        WINDOW_VULKAN = 268435456

    type
        WindowEventID = (WINDOWEVENT_NONE, WINDOWEVENT_SHOWN, WINDOWEVENT_HIDDEN, WINDOWEVENT_EXPOSED, WINDOWEVENT_MOVED, WINDOWEVENT_RESIZED, WINDOWEVENT_SIZE_CHANGED, WINDOWEVENT_MINIMIZED, WINDOWEVENT_MAXIMIZED, WINDOWEVENT_RESTORED, WINDOWEVENT_ENTER, WINDOWEVENT_LEAVE, WINDOWEVENT_FOCUS_GAINED, WINDOWEVENT_FOCUS_LOST, WINDOWEVENT_CLOSE, WINDOWEVENT_TAKE_FOCUS, WINDOWEVENT_HIT_TEST)
        DisplayEventID = (DISPLAYEVENT_NONE, DISPLAYEVENT_ORIENTATION, DISPLAYEVENT_CONNECTED, DISPLAYEVENT_DISCONNECTED)
        DisplayOrientation = (ORIENTATION_UNKNOWN, ORIENTATION_LANDSCAPE, ORIENTATION_LANDSCAPE_FLIPPED, ORIENTATION_PORTRAIT, ORIENTATION_PORTRAIT_FLIPPED)
        GLContext = *void
        GLattr = (GL_RED_SIZE, GL_GREEN_SIZE, GL_BLUE_SIZE, GL_ALPHA_SIZE, GL_BUFFER_SIZE, GL_DOUBLEBUFFER, GL_DEPTH_SIZE, GL_STENCIL_SIZE, GL_ACCUM_RED_SIZE, GL_ACCUM_GREEN_SIZE, GL_ACCUM_BLUE_SIZE, GL_ACCUM_ALPHA_SIZE, GL_STEREO, GL_MULTISAMPLEBUFFERS, GL_MULTISAMPLESAMPLES, GL_ACCELERATED_VISUAL, GL_RETAINED_BACKING, GL_CONTEXT_MAJOR_VERSION, GL_CONTEXT_MINOR_VERSION, GL_CONTEXT_EGL, GL_CONTEXT_FLAGS, GL_CONTEXT_PROFILE_MASK, GL_SHARE_WITH_CURRENT_CONTEXT, GL_FRAMEBUFFER_SRGB_CAPABLE, GL_CONTEXT_RELEASE_BEHAVIOR, GL_CONTEXT_RESET_NOTIFICATION, GL_CONTEXT_NO_ERROR)
        GLprofile = integer
    const
        GL_CONTEXT_PROFILE_COMPATIBILITY = 2
        GL_CONTEXT_PROFILE_CORE = 1
        GL_CONTEXT_PROFILE_ES = 4

    type
        GLcontextFlag = integer
    const
        GL_CONTEXT_DEBUG_FLAG = 1
        GL_CONTEXT_FORWARD_COMPATIBLE_FLAG = 2
        GL_CONTEXT_RESET_ISOLATION_FLAG = 8
        GL_CONTEXT_ROBUST_ACCESS_FLAG = 4

    type
        GLcontextReleaseFlag = (GL_CONTEXT_RELEASE_BEHAVIOR_NONE, GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH)
        GLContextResetNotification = (GL_CONTEXT_RESET_NO_NOTIFICATION, GL_CONTEXT_RESET_LOSE_CONTEXT)
        HitTestResult = (HITTEST_NORMAL, HITTEST_DRAGGABLE, HITTEST_RESIZE_TOPLEFT, HITTEST_RESIZE_TOP, HITTEST_RESIZE_TOPRIGHT, HITTEST_RESIZE_RIGHT, HITTEST_RESIZE_BOTTOMRIGHT, HITTEST_RESIZE_BOTTOM, HITTEST_RESIZE_BOTTOMLEFT, HITTEST_RESIZE_LEFT)
        HitTest = proc(win: *Window; area: *Point; data: *void): HitTestResult

    proc GetNumVideoDrivers(): integer
    proc GetVideoDriver(index: integer): *[]Sint8
    proc VideoInit(driver_name: *[]Sint8): integer
    proc VideoQuit
    proc GetCurrentVideoDriver(): *[]Sint8
    proc GetNumVideoDisplays(): integer
    proc GetDisplayName(displayIndex: integer): *[]Sint8
    proc GetDisplayBounds(displayIndex: integer; rect: *Rect): integer
    proc GetDisplayUsableBounds(displayIndex: integer; rect: *Rect): integer
    proc GetDisplayDPI(displayIndex: integer; ddpi: *[]real; hdpi: *[]real; vdpi: *[]real): integer
    proc GetDisplayOrientation(displayIndex: integer): DisplayOrientation
    proc GetNumDisplayModes(displayIndex: integer): integer
    proc GetDisplayMode(displayIndex: integer; modeIndex: integer; mode: *DisplayMode): integer
    proc GetDesktopDisplayMode(displayIndex: integer; mode: *DisplayMode): integer
    proc GetCurrentDisplayMode(displayIndex: integer; mode: *DisplayMode): integer
    proc GetClosestDisplayMode(displayIndex: integer; mode: *DisplayMode; closest: *DisplayMode): *DisplayMode
    proc GetWindowDisplayIndex(window: *Window): integer
    proc SetWindowDisplayMode(window: *Window; mode: *DisplayMode): integer
    proc GetWindowDisplayMode(window: *Window; mode: *DisplayMode): integer
    proc GetWindowPixelFormat(window: *Window): Uint32
    proc CreateWindow(title: *[]Sint8; x: integer; y: integer; w: integer; h: integer; flags: Uint32): *Window
    proc CreateWindowFrom(data: *void): *Window
    proc GetWindowID(window: *Window): Uint32
    proc GetWindowFromID(id: Uint32): *Window
    proc GetWindowFlags(window: *Window): Uint32
    proc SetWindowTitle(window: *Window; title: *[]Sint8)
    proc GetWindowTitle(window: *Window): *[]Sint8
    proc SetWindowIcon(window: *Window; icon: *Surface)
    proc SetWindowData(window: *Window; name: *[]Sint8; userdata: *void): *void
    proc GetWindowData(window: *Window; name: *[]Sint8): *void
    proc SetWindowPosition(window: *Window; x: integer; y: integer)
    proc GetWindowPosition(window: *Window; x: *[]integer; y: *[]integer)
    proc SetWindowSize(window: *Window; w: integer; h: integer)
    proc GetWindowSize(window: *Window; w: *[]integer; h: *[]integer)
    proc GetWindowBordersSize(window: *Window; top: *[]integer; left: *[]integer; bottom: *[]integer; right: *[]integer): integer
    proc SetWindowMinimumSize(window: *Window; min_w: integer; min_h: integer)
    proc GetWindowMinimumSize(window: *Window; w: *[]integer; h: *[]integer)
    proc SetWindowMaximumSize(window: *Window; max_w: integer; max_h: integer)
    proc GetWindowMaximumSize(window: *Window; w: *[]integer; h: *[]integer)
    proc SetWindowBordered(window: *Window; bordered: bool)
    proc SetWindowResizable(window: *Window; resizable: bool)
    proc ShowWindow(window: *Window)
    proc HideWindow(window: *Window)
    proc RaiseWindow(window: *Window)
    proc MaximizeWindow(window: *Window)
    proc MinimizeWindow(window: *Window)
    proc RestoreWindow(window: *Window)
    proc SetWindowFullscreen(window: *Window; flags: Uint32): integer
    proc GetWindowSurface(window: *Window): *Surface
    proc UpdateWindowSurface(window: *Window): integer
    proc UpdateWindowSurfaceRects(window: *Window; rects: *Rect; numrects: integer): integer
    proc SetWindowGrab(window: *Window; grabbed: bool)
    proc GetWindowGrab(window: *Window): bool
    proc GetGrabbedWindow(): *Window
    proc SetWindowBrightness(window: *Window; brightness: real): integer
    proc GetWindowBrightness(window: *Window): real
    proc SetWindowOpacity(window: *Window; opacity: real): integer
    proc GetWindowOpacity(window: *Window; out_opacity: *[]real): integer
    proc SetWindowModalFor(modal_window: *Window; parent_window: *Window): integer
    proc SetWindowInputFocus(window: *Window): integer
    proc SetWindowGammaRamp(window: *Window; red: *[]Uint16; green: *[]Uint16; blue: *[]Uint16): integer
    proc GetWindowGammaRamp(window: *Window; red: *[]Uint16; green: *[]Uint16; blue: *[]Uint16): integer
    proc SetWindowHitTest(window: *Window; callback: HitTest; callback_data: *void): integer
    proc DestroyWindow(window: *Window)
    proc IsScreenSaverEnabled(): bool
    proc EnableScreenSaver
    proc DisableScreenSaver
    proc GL_LoadLibrary(path: *[]Sint8): integer
    proc GL_GetProcAddress(proc_: *[]Sint8): *void
    proc GL_UnloadLibrary
    proc GL_ExtensionSupported(extension: *[]Sint8): bool
    proc GL_ResetAttributes
    proc GL_SetAttribute(attr: GLattr; value: integer): integer
    proc GL_GetAttribute(attr: GLattr; value: *[]integer): integer
    proc GL_CreateContext(window: *Window): GLContext
    proc GL_MakeCurrent(window: *Window; context: GLContext): integer
    proc GL_GetCurrentWindow(): *Window
    proc GL_GetCurrentContext(): GLContext
    proc GL_GetDrawableSize(window: *Window; w: *[]integer; h: *[]integer)
    proc GL_SetSwapInterval(interval: integer): integer
    proc GL_GetSwapInterval(): integer
    proc GL_SwapWindow(window: *Window)
    proc GL_DeleteContext(context: GLContext)

    // from begin_code.h
    const
        INLINE = nil // CHECK inline
        __inline__ = nil // CHECK inline
        FORCE_INLINE = nil // CHECK staticinline


    // from stdarg.h
    const
        __GNUC_VA_LIST = 1

    type
        __va_elem = cstruct
                        gp_offset: Uint32
                        fp_offset: Uint32
                        overflow_arg_area: *void
                        reg_save_area: *void end
        va_list = carray 1 of __va_elem
        __gnuc_va_list = va_list


    // from stddef.h
    const
        NULL = 0

    type
        size_t = integer
        ptrdiff_t = integer
        wchar_t = integer
        max_align_t = ptrdiff_t


    // from stdint.h
    const
        INT8_MIN = -128
        INT16_MIN = -32767 - 1
        INT32_MIN = -2147483647 - 1
        INT64_MIN = nil // CHECK (-__INT64_C(9223372036854775807)-1)
        INT8_MAX = 127
        INT16_MAX = 32767
        INT32_MAX = 2147483647
        INT64_MAX = nil // CHECK (__INT64_C(9223372036854775807))
        UINT8_MAX = 255
        UINT16_MAX = 65535
        UINT32_MAX = 4294967295
        UINT64_MAX = 18446744073709551615

    type
        int8_t = char
        int16_t = shortint
        int32_t = integer
        uint8_t = byte
        uint16_t = shortint
        int64_t = ptrdiff_t
        uint32_t = wchar_t
        uint64_t = size_t
        intptr_t = int32_t
        uintptr_t = wchar_t
        intmax_t = ptrdiff_t
        uintmax_t = size_t

end SDL
